<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infrastructure as Codeの実践 on テクニカルリファレンス</title>
    <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/</link>
    <description>Recent content in Infrastructure as Codeの実践 on テクニカルリファレンス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 15 May 2019 10:37:37 +0900</lastBuildDate>
    
	<atom:link href="https://sbcloud.github.io/help/best-practice/infrastructure-as-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Terraform 02章 Terraformとは</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/02/how_to_use_terraform/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/02/how_to_use_terraform/</guid>
      <description>第2章 Terraformとは &amp;nbsp; AlibabaCloudというクラウドサービスが登場したことで、クラウドサービス上にあるECSという仮想コンピューティングを作成・破棄するのが非常に簡単になりました。ボタン一つで数分でコンピューティングを起動できます。AlibabaCloudのマネジメントコンソールはWeb上にて操作する、数多くの機能をまとめた完成度の高いGUIです。
&amp;nbsp; しかし、Web上にてGUI操作とはいえ設定項目を一つ一つずつ画面上操作するのは骨が折れるのと、小規模サービスでも構築にヒューマンエラーや運用・学習コストはどうしても付き物になります。例えばAlibabaCloud未経験者がECSをCS 100台を手動起動してみましょう。この作業にどれほどの時間がかかるか、そしてミスをゼロにして稼働できるか、という課題があります。そこで解決の道となったのがInfrastructure as Code（以降は「IaC」と略します）です。
&amp;nbsp; IaCはコード通りの内容を自動で設定する仕組みを持ちます。IaCの種類はPackerやVagrantなど様々ですが、HashiCorp社がオープンソースとして手掛けるTerraformというマルチクラウド対応プロビジョニングツールがあります。シンプルなDSL(HCL)、自由自在な変数表現と状態管理が特徴です。
&amp;nbsp; TerraformはAlibabaCloudだけでなくAmazon Web Services 、GoogleCloudPlatform、MicrosoftAzure、Docker、OpenStackなど様々なインフラに幅広く対応しています。インフラを構築するためのプロビジョニングツールであり、開発者だけなく、運用担当者でも必要となりうるプロビジョニングツールです。
&amp;nbsp; Terraformは構築したいインフラの構成をテキスト形式のテンプレートファイルに定義します（Infrastructure as Code）。「どこのリージョン」「どのスペックのECS、どのリソースを使うか」「支払い方法」「展開方法」といったインフラの状態をコードとして記述し、ターミナルからコマンドを実行するだけでクラウド上に適用 (構築) が出来ます。逆に既存のリソースをTerraformでImportすることでコード化、同じ構成のコードを他リージョンで同様展開することも可能です。 他にIaCとしてPackerやVagrantがありますが、本ガイドラインとしてはTerraformを中心とした説明で進めます。 &amp;nbsp; 構成変更や他クラウドプロパイダからのマイグレーション、同じリソースで別リージョン、別アカウントにて展開するときにIaCがあることでエラーなくシームレスに移管ができます（リソースをGUIベースでコピーすることは不可能です。） また障害や高負荷など問題発生時でも環境を復元することができるメリットもあります。
&amp;nbsp; 加えて、コードからリソースを作成することで学習コスト・運用コストを削減することができます。例えば先ほどの例、AlibabaCloud未経験者がECS 100台を手動でなくIaC、Terraformで起動すると、ミスをゼロへ抑制はもちろん、学習工数・運用保守コスト・全てが大幅に節約できます。
&amp;nbsp; また、クラウド環境（仮想環境）が登場したことで、サーバらHW、物理的リソース制約がなくなりました。これにより、サーバやネットワークを簡単に構築したり、一旦構築したものをすぐに破棄することが出来るようになったので、一度構築したインフラやリソースは変更を加えることなく破棄して、新しいものを構築する考えが可能になりました。 →このような流れは「Immutable Infrastructure（不変のインフラ）」と呼ばれ、インフラ変更履歴を管理するのではなく、動作している「インフラの状態」を管理（=必要に応じて使い捨て）からクラウド環境ではコードによるインフラ構成・構築・管理・運用を行う必要があります。
&amp;nbsp; 前置きが長くなりましたが、クラウドサービスの良いところは立案した戦略や設計をすぐに試せれるところであり、AlibabaCloudの良いところは、PaaS/IaaS/SaaS/KaaS&amp;hellip;幅多くのプロダクトサービスがあり、これらの活用によってより楽に生産的にすることができる点です。是非楽しみながらAlibabaCloudのTerraformを読み進めていただければ大変幸いです。</description>
    </item>
    
    <item>
      <title>Terraform 03章 Install</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/03/install/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/03/install/</guid>
      <description>第3章 Terraformのインストール 本章は Terraform のインストール方法を学びます。 &amp;gt;※ Mac/Linuxでのインストール方法になります。Windows版でのTerraform導入方法は別途記載予定です。 &amp;gt;※ Terraformバージョン違いを防止するためにこちらのDockerファイルを使った使用方法がありますが、こちらも別途記載予定です。 3.1 Homebrew &amp;nbsp; Terraformは前章で説明した通り、HashiCorp社がオープンソースとして展開してるツールです。基本的にはバージョンアップに 追従しやすい tfenv の利用を推奨しますが、お試しであればHomebrew も手軽です。 macOS の場合は次のように、Homebrew を使ってインストールできます。
$ brew install terraform $ terraform --version Terraform v0.11.13  
3.2 tfenv tfenvは Terraformのバージョン管理マネージャです。 tfenvを使うことで、異なるバージョンのTerraformを差異なく利用できます。
$ brew install tfenv $ tfenv --version tfenv 0.6.0  完了したら、インストール可能なTerraform のバージョンを確認します。
$ tfenv list-remote 0.12.0-beta1 0.11.13 ・・・  最新の安定バージョンかつAlibabaCloud Terraform対応は 0.11.13です。0.11.13を次のようにインストールします。
$ tfenv install 0.11.13  terraformには .terraform-versionというファイルがあり、こちらにバージョンを記述すると、そのバージョンを自動的にインストールできます。
$ echo 0.11.13 &amp;gt; .</description>
    </item>
    
    <item>
      <title>Terraform 04章 サンプルプロジェクト</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/04/sample_project/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/04/sample_project/</guid>
      <description>第4章 サンプルプロジェクト &amp;nbsp; 前章は Terraform のインストール方法を学びました。それではサンプルプロジェクトを作成します。簡単なWebサーバを立ち上げながら、Terraformの流れや中身を確認します。 4.1 ディレクトリ・ファイル構成 &amp;nbsp; Terraformのファイルの拡張子は *.tf です。実行時、同じディレクトリの *.tf ファイルがマージされますので、基本は以下3ファイルに分けてそれぞれの用途・目的に応じた記載・運用がベターです。
main.tf … モジュールが内包するリソース、データソースなどの定義 outputs.tf … モジュールが出力するAttributeの定義 variables.tf … モジュールが受け取る変数の定義  main.tf には どのプロパイダを使うかを記載します。 階層化は任意ですが、.tfから別のフォルダの.tfに記載されてる変数を取り出すためにルートディレクトリを指定することがありますのでそこは注意が必要です。apply (=実行) にて分離実行することも可能です。 例えば以下のようにプロダクトサービス毎にフォルダを作成し、それぞれのリソースを作成しても、最終的には一つへまとめれます。
├── main.tf ├── output.tf ├── variables.tf │ ├── region │├── VPC ││├── main.tf ││├── output.tf ││└── variables.tf ││ │├── ECS ││├── main.tf ││├── output.tf ││└── variables.tf ・ ・ ・  &amp;nbsp; RAMなど他者へ渡したくない情報がある場合、別途設定ファイル（ confing.tfvars など）へ記載し、実行時は -var-file引数で 設定ファイルを読み取り実行することができます。
├── main.tf ├── output.</description>
    </item>
    
    <item>
      <title>Terraform 05章 Terraformを実行しょう</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/05/run_terraforom/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/05/run_terraforom/</guid>
      <description>第5章 サンプルプロジェクトを実行しょう &amp;nbsp; 前章は 簡単なWebサーバを立ち上げるというサンプルプロジェクトを作成しました。今章はサンプルプロジェクトを実行しつつ、Terraformの流れや中身を確認します。
Terraformの実行は非常にシンプルです。以下図のようにterraform initから始まり、terraform play、terraform applyでリソース作成を実行します。

5.1 terraform init &amp;nbsp; コードを書いたら「terraform init」コマンドを実行します。このコマンドはTerraformの実行に必要なプロパイダーのバイナリをダウンロードしてくれます。「Terraform has been successfully initialized!」と表示されていれば作業ディレクトリ構成的にOKです。
$ terraform init Initializing provider plugins... ・・・ Terraform has been successfully initialized!  
5.2 terraform plan 次は「terraform plan」コマンドです。 RAMなどの情報を別途設定ファイル confing.tfvars へ記載した場合は以下のコマンドで実行します。
$ terraform plan -var-file=&amp;quot;confing.tfvars&amp;quot; Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage.</description>
    </item>
    
    <item>
      <title>Terraform 06章 Terraform文法について</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/06/program_syntax/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/06/program_syntax/</guid>
      <description>第6章 Terraform文法について &amp;nbsp; 前章は 簡単なWebサーバを立ち上げるというサンプルプロジェクトを実行しました。うち、Terraformには様々な記載文法がありますので、把握した方がいい部分だけ説明します。

6.1 Configuration Syntax &amp;nbsp; Terraformのコード構成要素、コードの構成文の書き方です。Terraformの利用ガイドラインに沿って記載してみてください。Terraformのバージョンによっては書き方が異なる場合がありますので、注意が必要です。
# project_nameを宣言 variable &amp;quot;project_name&amp;quot; { } /* alicloud_vpcを設定 変数project_nameを呼び出す */ resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; }   単一行コメントは#をつけます。 複数行コメントは/*と*/で囲みます。 文字列は二重引用符で囲みます。 文字列は${}を使って他の構文や値を補間できます。 ${var.foo}。 数字は10進数で扱います。数字の前に英数字を付けると、例えば0xでも16進数として扱われます。 ブール値が使え、true、falseのどれかになります。 プリミティブ型のリストは角括弧（[]）で作成できます。例：[&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;] マップは中括弧（{}）とコロン（:） で作成できます。例：{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;bar&amp;quot;: &amp;quot;baz&amp;quot; } キーが数字で始まっていない限り、キーでは引用符を省略できます。その場合は、引用符が必要です。単一行マップでは、キーと値のペアの間にコンマが必要です。複数行マップではキーと値のペアの間の改行で十分です。  他、構成文の書き方もありますが、ひとまずは上記のを抑えれば大抵問題ないです。

6.2 Interpolation Syntax &amp;nbsp; 変数・関数・属性など、コード補充機能です。
 ユーザ文字列変数 var.接頭辞とそれに続く変数名を使用します。たとえば${var.foo} で foo変数値を補間します。
 ユーザーマップ変数 構文はvar.MAP[&amp;quot;KEY&amp;quot;]です。たとえば${var.amis[&amp;quot;us-east-1&amp;quot;]} でマップ変数us-east-1、内キーの値amisを取得します。</description>
    </item>
    
    <item>
      <title>Terraform 07章 dockerについて</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/07/docker/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/07/docker/</guid>
      <description>第7章 dockerについて &amp;nbsp; 前章までは Terraformのインストール方法、Terraformの文法、実行方法を説明しました。しかしこれらはTerraform v0.11.13前提での話なので、Terraformのバージョンが違うことで挙動が異なってしまうこともあります。Terraformでよく使うメソッドが急に廃止、、というのもよくあります。それを防ぐためにdockerを使ったインストール、利用する方法があります。dockerはパッケージングを行うための技術です。 *注：Terraformのバージョン食い違いは基本的にtfenvでカバーできます。詳しくは3章 Install &amp;amp; dockerを参照してください

7.1 dockerについて &amp;nbsp; dockerはOS・ミドルウェア・ファイルシステム全体をイメージという単位で取り扱い、まるごとやりとり出来るツールです。また、イメージの配布やバージョン管理も可能です。メリットとして、手軽に同じ環境を何人のユーザ・ユーザ・他のマシンでも手に入れることができ、即座に同環境を再現（ CI (Continuous Integration) 継続的インテグレーションと CD (Continuous Delivery) 継続的デリバリー ）することができます。 また、dockerによるTerraformのインストールのみならず、docker Imageを使った既存のプロダクトリソースをそのまま導入することも可能です。（docker Imageとは、dockerコンテナを作成する際に必要となるファイルシステムです。）

7.2 dockerのTerraform位置について &amp;nbsp; Terraformによるdockerの利用は大きく2パターンあります。 * Terraformのバージョン違いなど環境差分を抑えつつ実行する場合 * CI/CD:継続的インテグレーションと継続的デリバリーをする場合
&amp;nbsp; 前者はバージョン固定や実行環境を汚さずに使用するメリットがあります。様々な環境でterraformを使用したい場合は直接terraformコマンドをインストールせず、バージョン管理が可能なツール(tfenv)を使用してインストールすルことを勧めます。 &amp;nbsp; 後者に関しては、dockerのImageファイルをdocker hub（リポジトリ）へ保存することで、新規ECSや各種アプリケーション、Webサイトを立ち上げる時、docker hub（リポジトリ）から対象のDocker ImageファイルをPullしそのまま実行することで、どの環境でも継続CI/CDを実現することができます。
本ガイドラインはTerraformをメインとしてるため、ここにCI/CDや方法は載せませんが、やり方は以下サイトを参照してみてください。（近日中に日本語で手順方法を載せる予定）
Dockerize App and Push to Container Registry: CI/CD Automation on Container Service (1)
Continuous Deployment Automation on Alibaba Cloud: CI/CD Automation on Container Service (2)</description>
    </item>
    
    <item>
      <title>Terraform 08章 moduleについて</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/08/module/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/08/module/</guid>
      <description>第8章 moduleについて &amp;nbsp; これまでTerraformの書き方を学びました。しかし問題があります。それはvariableによる変数宣言が多すぎると、可読性も下がり、場合によっては何度も同じ内容を書く必要があったりします。それを防ぐために、他のプログラミング言語と同じくモジュール化があります。

8.1 Moduleとは &amp;nbsp; Terraformにおけるmoduleは各resourceを抽象化するためのものです。以下の例を見てみましょう。モジュール化されてないソースと、モジュール化されてないソースを見てください。
モジュール化されてないソース variable &amp;quot;region&amp;quot; { default = &amp;quot;ap-northeast-1&amp;quot; } variable &amp;quot;solution_name&amp;quot; { default = &amp;quot;Web-Application-for-Terraform&amp;quot; } variable &amp;quot;web_layer_name&amp;quot; { default = &amp;quot;Web&amp;quot; } variable &amp;quot;web_availability_zone&amp;quot; { default = &amp;quot;a&amp;quot; } resource &amp;quot;alicloud_instance&amp;quot; &amp;quot;web&amp;quot; { instance_name = &amp;quot;${var.web_layer_name}&amp;quot; availability_zone = &amp;quot;${var.region}${var.web_availability_zone}&amp;quot; ・・・ ・・・ }  resourceの中に変数のプレースホルダを置き、さらにその変数名を variableで変数宣言し呼び出ししてしまいます。それを抑えるのがmoduleです。
モジュール化されてるソース variable &amp;quot;region&amp;quot; { value = &amp;quot;ap-northeast-1&amp;quot; } variable &amp;quot;solution_name&amp;quot; { value = &amp;quot;Web-Application-for-Terraform&amp;quot; } variable &amp;quot;web_layer_name&amp;quot; { value = &amp;quot;Web&amp;quot; } variable &amp;quot;web_availability_zone&amp;quot; { value = &amp;quot;a&amp;quot; } module { source = &amp;quot;.</description>
    </item>
    
    <item>
      <title>Terraform 09章 VPC</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/09/vpc/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/09/vpc/</guid>
      <description>第9章 AlibabaCloud VPCについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

9.1 VPC &amp;nbsp; VPCは、Alibaba Cloudに設置されたプライベートネットワークです。 VPCはAlibaba Cloudの他のアカウントを含む仮想ネットワークと論理的に分離されています。
&amp;nbsp; VPCはAlibaba Cloud でお客様専用のプライベートネットワークです。 CIDRというIPアドレス範囲の指定で経路、ルートテーブルとネットワークゲートウェイの設定など、VPCを完全に制御できます。VPC環境があることで、ECS、RDS、SLBなど外部インターネットからアクセスしないAlibaba Cloudリソースを使用することができます。
&amp;nbsp; システムをセキュアにするため、パブリックネットワークには必要最小限のリソースのみ配置し、それ以外はプライベートネットワークに置くのがベストプラクティスです。

9.2 コンポーネント &amp;nbsp; VPCは、CIDRブロック、VRouter、及びVSwitchで構成されます。
・CIDRブロック・・・IPアドレスの空間を指定することで通信経路を出す設定情報。プライベートIPアドレス範囲をCIDR（Classless Inter-Domain Routing）ブロックの形式で指定する必要があります。
・VRouter・・・VPCのハブ。VPC内の各VSwitchを接続でき、ゲートウェイとしてもVPCを他のネットワークに接続することもできます。
・VSwitch・・・VPCの基本的なネットワークデバイス、様々なクラウド製品インスタンスに接続するために使用されます。
VPCコンポーネントは以下のような構成図になります。 また、VPC作成には以下の通り制限事項がありますので、注意が必要です。 |リソース|デフォルトの制限|クォータ量の増減| |&amp;mdash;|&amp;mdash;|&amp;mdash;| |各リージョンでの最大VPC数|10 || |使用可能なCIDRブロックの範囲|192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8,及びそのサブセット|サポートセンターまでお問い合わせください| |VPC 内の VRouter の最大数|1|申請不可| |VPC 内の VSwitch の最大数|24|サポートセンターまでお問い合わせください| |VPC 内のルータテーブルの最大数|1|申請不可| |ルータテーブル内のルートエントリの最大数|48|サポートセンターまでお問い合わせください| |VPCで実行できるクラウド製品インスタンスの最大数|15,000|申請不可| 参考:VPC使用制限</description>
    </item>
    
    <item>
      <title>Terraform 10章 ECS、EIP</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/10/ecs/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/10/ecs/</guid>
      <description>第10章 AlibabaCloud ECS、EIPについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

10.1 ECS &amp;nbsp; ECSは、Alibaba Cloudによる仮装コンピューティングサービスです。ECS インスタンスは、ECS のコアコンポーネントであり、CPU、メモリ、およびその他の基本的なコンピューティングコンポーネントを含む仮想コンピューティング環境です。ディスク、イメージ、スナップショットなどの他のリソースは、ECS インスタンスと組み合わせてのみ使用できます。 &amp;nbsp; Alibaba CloudのECSはビジネスやWebアプリケーションなど様々なニーズに対応しており、即時に作れることが特徴です。
&amp;nbsp; ECSインスタンス生成リソースは多くのオプション（任意）でパラメータや構成を指定できます。ECSインスタンスはVPCやセキュリティグループとは少し異なり、OSやバージョン選定、起動時データ引き渡しやECS使い捨て利用など様々な利用方法が実現出来るため、ここは抑えておきましょう。

10.2 ECSインスタンス生成のTerraformについて &amp;nbsp; 本題、ECSインスタンス生成作成に移ります。ECSインスタンス生成するだけの簡単なソースを作ってみます。
resource &amp;quot;alicloud_instance&amp;quot; &amp;quot;ECS_instance&amp;quot; { instance_name = &amp;quot;ECS_instance_for_terraform&amp;quot; host_name = &amp;quot;ECS_instance_for_terraform&amp;quot; instance_type = &amp;quot;ecs.n4.small&amp;quot; image_id = &amp;quot;centos_7_06_64_20G_alibase_20190218.vhd&amp;quot; system_disk_category = &amp;quot;cloud_efficiency&amp;quot; security_groups = [&amp;quot;${alicloud_security_group.sg.id}&amp;quot;] availability_zone = &amp;quot;${var.zone}&amp;quot; vswitch_id = &amp;quot;${alicloud_vswitch.</description>
    </item>
    
    <item>
      <title>Terraform 11章 SLB</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/11/slb/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/11/slb/</guid>
      <description>第11章 AlibabaCloud SLBについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

11.1 SLB &amp;nbsp; SLB（Server Load Balancer）はアプリケーションや Web サイトのトラフィックを分散させるサービスです。
&amp;nbsp; SLB は、仮想サービスアドレスを設定することによって、追加の ECS インスタンスを高性能で可用性の高いアプリケーションサービスプールに仮想化し、クライアントからのリクエストを、 転送ルールに従ってサーバープール内のECS インスタンスに分配します。
&amp;nbsp; また、SLB は、追加されたバックエンドサーバーの状態をチェックし、異常状態の ECS インスタンスを自動的に分離します。そうすることで SPOF (単一障害点) 問題を除去し、アプリケ ーションの全体的なサービス性能を向上させます。 それに加え、Alibaba Anti-DDoS と組み合わせることで、SLB は DDoS 攻撃を防御することができます。

11.2 コンポーネント &amp;nbsp; SLBは以下のコンポーネントが含まれています。
 SLB インスタンス SLB インスタンスは、実行中の負荷分散サービスで、着信トラフィックをバックエンドサーバーに分配します。 負荷分散サービスを使用するには、SLB インスタンスを作成します。インスタンスには少なくとも 1 つのリスナーと 2 つのバックエンドサーバーを設定する必要があります。</description>
    </item>
    
    <item>
      <title>Terraform 12章 AutoScale</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/12/autoscale/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/12/autoscale/</guid>
      <description>第12章 AlibabaCloud AutoScaleについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

12.1 AutoScale &amp;nbsp; Auto Scaling はECSリソースの容量を自動的にスケールイン/スケールアウト調整してくれます。 ※ESSとは、SDK名やパッケージ名で用いられるAuto Scalingの略称です。(Elastic Scaling Service

12.2 コンポーネント &amp;nbsp; VPCは、CIDRブロック、VRouter、及びVSwitchで構成されます。
・スケールアウト ECSリソースが増加した際、自動的にECSインスタンスが作成されるので、アクセス遅延や過度のリソース負荷を回避できます。 ・スケールイン ビジネスニーズに伴い、基盤となるECAリソースが低下した場合、自動的にECSインスタンスが削除され、リソースの無駄を省いてくれます。 ・柔軟なリカバリ 異常なECSインスタンスを検知し、自動的にリリースされ、代わりに新規ECSインスタンスが作成されます。 
11.3 AutoScaleのTerraformについて &amp;nbsp; 本題、AutoScale作成に移ります。以下の構成図通り、簡単なソースを作ってみます。
resource &amp;quot;alicloud_ess_scaling_group&amp;quot; &amp;quot;scaling&amp;quot; { min_size = 2 max_size = 10 scaling_group_name = &amp;quot;tf-scaling&amp;quot; vswitch_ids=[&amp;quot;${alicloud_vswitch.vsw. *.id}&amp;quot;] loadbalancer_ids = [&amp;quot;${alicloud_slb.</description>
    </item>
    
    <item>
      <title>Terraform 13章 OSS</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/13/oss/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/13/oss/</guid>
      <description>第13章 AlibabaCloud OSSについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

13.1 OSS &amp;nbsp; Object Storage Service （OSS）は、クラウド内の任意の量のデータの保存、バックアップ、およびアーカイブを可能にするストレージサービスです。

13.2 コンポーネント &amp;nbsp; OSSはTerraform モジュールを使用して、バケットとオブジェクトを管理できます。 例として、 * バケット管理機能 * バケットの作成 * バケットの ACL を設定 * バケットに CORS (Cross-Origin Resource Sharing) を設定 * バケットのログ記録を設定 * バケットの静的 Web サイトホスティングを設定 * バケットのリファラを設定 * バケットのライフサイクルルールを設定 * オブジェクト管理機能 * オブジェクトをアップロード * オブジェクトのサーバー側の暗号化を設定 * オブジェクトに ACL を設定 * オブジェクトメタを設定</description>
    </item>
    
    <item>
      <title>Terraform 14章 RDS</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/14/rds/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/14/rds/</guid>
      <description>第14章 AlibabaCloud RDSについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

14.1 RDS &amp;nbsp; Relation Database Service （RDS）は、ApsaraDB for RDS 、クラウド内の独立したデータベースサービスです。

14.2 コンポーネント &amp;nbsp; ApsaraDB for RDSシリーズとしてMySQL、SQL Server、PostgreSQL、PPASがあります。
・ApsaraDB for MySQL・・・MySQL。現状5.5、5.6、5.7をサポートしています。
・ApsaraDB for SQL Server・・・SQL Server。2008 R2 EE、2012 のWeb/Standard/EE、2016 のWeb/Standard/EEをサポートしています。
・ApsaraDB for PostgreSQL・・・PostgreSQL。9.4をサポートしています。
・ApsaraDB for PPAS・・・Postgres Plus Advanced Server （ PPAS ）、Oracle Database互換性機能があります。現在バージョン 9.</description>
    </item>
    
    <item>
      <title>Terraform 15章 RAM</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/15/ram/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/15/ram/</guid>
      <description>第15章 AlibabaCloud RAMについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

15.1 RAM権限管理 &amp;nbsp; AlibabaCloudはどのサービスを利用・操作するにしろ権限が必要です。 Terraformで作成したリソースサービスにも他ユーザが操作できるように権限アタッチが必要になります。 &amp;nbsp; 本章では、AlibabaCloudサービスに対する権限付与の方法を学びます。

15.2 Alibaba CloudのRAMについて &amp;nbsp; RAM（Resource Access Management）はユーザーID の管理とアクセス制御、権限管理のためのサービスです。RAMを使用することで、ユーザーアカウント (従業員、システム、アプリケーションなど) を作成および管理し、Alibaba Cloud アカウントのリソースに対してそのユーザーアカウントが所有する操作権限を制御できます。Terraformによるリソースを実行するときはRAMで実行権限が必須です。

15.3 RAMロールとRAMユーザーの違い ・RAMロールは仮想ID であり、固定のIDは持っていますが、ID認証情報アクセスキーを持ちません。 ・RAMユーザは、固定のIDとID認証アクセスキーを持つ実際のIDであり、一般的には、特定のユーザーまたはアプリケーションに対応します。
graph LR; A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;B(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;#34;) A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;C(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;#34;) B(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;#34;)-.-&amp;gt;D(&amp;#34;ロール(役割)&amp;#34;) C(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;#34;)-.-&amp;gt;E(&amp;#34;ユーザ(人)&amp;#34;) D(&amp;#34;ロール(役割)&amp;#34;)-.-&amp;gt;F(&amp;#34;ロール(役割)を&amp;lt;br&amp;gt;エンティティ(ECSインスタンスなど）にアタッチ&amp;#34;) A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;G(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;#34;) G(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;#34;)-.-&amp;gt;H(&amp;#34;グループ（ユーザの集まり）&amp;#34;) &amp;nbsp; RAMロールは権限が付与された実際のユーザーが引き受ける必要があります。ロールを引き受けると実際のユーザーはこのRAMロールの一時セキュリティトークンを受け取ります。これにより、この一時セキュリティトークンを使用して、ロールに許可されているリソースにアクセスできます。
&amp;nbsp; 普段の利用時はRAMユーザで管理・運用していくのがベストプラクティスですが、Terraform利用時は基本的にAdministratorAccessが必要となります。

15.4 ポリシー &amp;nbsp; 権限はポリシーで定義します。ポリシーでは「実行可能なアクション」や「操作可能なリソース」を指定でき、柔軟に権限が設定できます。 15.</description>
    </item>
    
    <item>
      <title>Terraform 16章 Kubernetes</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/kubernetes/</guid>
      <description>第16章 AlibabaCloud Kubernetesについて &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第9章-第16章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第9章：AlibabaCloud VPC 第10章：AlibabaCloud ECS、EIP 第11章：AlibabaCloud SLB 第12章：AlibabaCloud AutoScale 第13章：AlibabaCloud OSS 第14章：AlibabaCloud RDS 第15章：AlibabaCloud RAM 第16章：AlibabaCloud Kubernetes  各章それぞれサンプルを交えて説明します。

16.1 Kubernetes &amp;nbsp; Kubernetesは自動デプロイ、スケーリング、アプリ・コンテナの運用自動化のために設計されたオープンソースのプラットフォームです。Kubernetesによって、以下のことが要求に迅速かつ効率良く対応ができます。
 アプリを迅速に予定通りにデプロイする (コンテナをサーバー群へ展開する) 稼働中にアプリをスケールする（稼働中にコンテナ数を変更する） 新機能をシームレスに提供開始する (稼働中にロールアウトする) ハードウェアの利用率を要求に制限する (コンテナで共存させて稼働率を高くする）  &amp;nbsp; Kubernetesのゴールは、下記の様なアプリの運用負担を軽減するためのエコシステムのコンポーネントとツールを整備することです。
 可搬性: パブリック・クラウド、プライベート・クラウド、ハイブリッド・クラウド、マルチ・クラウド 拡張可能: モジュール化、追加可能、接続可能、構成可能 自動修復: 自動配置、自動再起動、自動複製、自動スケーリング  &amp;nbsp; 2014年にプロジェクトが開始され、運用経験を基に、本番のワークロードを大規模に実行し、コミュニティのベストプラクティスのアイデアやプラクティスと組み合わせています。 Kubernetesの事例は https://kubernetes.io/case-studies/ にあります。
&amp;nbsp; またAlibabaのKubernetesサービスは非常に便利な上、Container Clustor、kubernetes managed、Container Registryと各方面へ進化段階なので、随時チェックするといいでしょう。

16.2 コンポーネント &amp;nbsp; Container Service for Kubernetes はネイティブの Kubernetes をベースに構成、拡張されています。 このサービスは、クラスターの作成および拡張を容易に行うことができ、Alibaba Cloud の機能である、仮想化、ストレージ、ネットワーク、セキュリティ、およびKubernetes コンテナー化したアプリケーションの高品質な実行環境を統合することができます。</description>
    </item>
    
    <item>
      <title>Terraform 17章 example: ssh踏み台サーバ</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/17/bastion-server/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/17/bastion-server/</guid>
      <description>第17章 example: ssh踏み台サーバ &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
17.1 ssh踏み台サーバ &amp;nbsp; Terraformで踏み台サーバ、本番サーバを作ってみます。ゴールの構成図は以下の通りです。
ソースは以下になります。サンプルソースは[こちら]()にあります。
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable Bastion-Server vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 18章 example: SLB設定サンプル</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/18/slb-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/18/slb-setting-sample/</guid>
      <description>第18章 example: SLB設定サンプル &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
18.1 SLB設定サンプル &amp;nbsp; Terraformで踏み台サーバ、本番サーバを作ってみます。ゴールの構成図は以下の通りです。
ソースは以下になります。サンプルソースは[こちら]()にあります。
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable SLB-Setteing-Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 19章 example: RDS設定サンプル</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/19/rds-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/19/rds-setting-sample/</guid>
      <description>第19章 example: RDS設定サンプル &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
19.1 SLB設定サンプル &amp;nbsp; Terraformで踏み台サーバ、本番サーバを作ってみます。ゴールの構成図は以下の通りです。
なおECSからRDS for MySQLへへ接続するためのdocker-compose.ymlファイルは以下の通りです。 
ソースは以下になります。サンプルソースは[こちら]()にあります。
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable RDS Setting Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 20章 example: kubernetes設定サンプル</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/20/kubernetes-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/20/kubernetes-setting-sample/</guid>
      <description>第20章 example: kubernetes設定サンプル &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
20.1 kubernetes設定サンプル &amp;nbsp; 簡単なkuberntesクラスターを作ってみます。シングルゾーンによるクラスタでの作成になります。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable k8s-Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 21章 example: Webアプリケーション</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/21/web-application/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/21/web-application/</guid>
      <description>第21章 example: Webアプリケーション &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
21.1 Webアプリケーション &amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。IDCなどデータセンターにて、スケーラブルで世界規模で利用可能なWebアプリケーションを開発および展開するのは、多くの手作業から工数がかかり、またトラフィックに応じてリソースの効率さが悪くなってしまう課題があります。しかしAlibabaCloudで構築すると、それらの課題が払拭されます。それだけでなく、上に、投資収益率（ROI）も向上するメリットがあります。
 すぐに着手できる配置構成 必要な分だけリソースを提供（オンデマンドサーバープロビジョニング） 単一障害点（SPOF）なし 多重層のセキュリティ保護あり  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 22章 example: 高速コンテンツ配信</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/22/accelerated-content-delivery/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/22/accelerated-content-delivery/</guid>
      <description>第22章 example: 高速コンテンツ配信 &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
22.1 高速コンテンツ配信 &amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。従来のWebアプリケーションアーキテクチャでは、Webアプリケーションが大量のリクエストトラフィックを受け取ると、サーバーが過負荷になり、サイトが遅くなったりサーバーがクラッシュしたりする可能性があります。また地理的に異なる場所に分散していると、コンテンツが1か所から配信されるため、待ち時間の問題が発生する可能性があります。そのためにWebアプリケーションは高速でコンテンツ配信することが望ましいです。
 グローバル配信が可能 静的および動的コンテンツのアクセラレーション 待ち時間の短縮などパフォーマンス改善  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 23章 example: オートスケーリング</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/23/auto-scaling/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/23/auto-scaling/</guid>
      <description>第23章 example: オートスケーリング &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
23.1 オートスケーリング &amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。
プロビジョニング済みのECSインスタンスをメインとするWebアプリケーションにて、予測が難しいトラフィックニーズに応じて、必要なECSインスタンス台数を増減してくれます。これにより、アプリケーションを止めることなく稼働し続けることが出来ます。同時にリソースに応じた需要増/減から必要なコスト管理も実現出来ます。
 アプリケーションの稼働時間・堅牢性向上 サーバーの自動プロビジョニング ニーズに応じたコスト管理  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 24章 example: KubernetesによるコンテナでWordPress作成</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/24/web-application-on-kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/24/web-application-on-kubernetes/</guid>
      <description>第24章 example: KubernetesによるコンテナでWordPress作成 &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第24章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
24.1 KubernetesによるコンテナでWordPress作成 &amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。 1. AlibabaCloudでKubernetesクラスターを生成 1. kube_configを環境変数にて設定 1. KubernetesクラスターのローカルボリュームにてWordPressとMySQLをインストール
こちらはAlibabaCloud Terraformのサンプル集を通じての紹介になります。
24.2 Kubernetesでクラスタ生成 &amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。

&amp;nbsp; TerraformでWebアプリケーションを作ってみます。step1のゴール構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Terraform 25章 example: MagentoでECサイト構築</title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/25/ec-site-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/25/ec-site-sample/</guid>
      <description>第25章 example: MagentoでECサイト構築 &amp;nbsp; 第8章までは Terraformのインストール方法、コード記載方法、実行方法、第9章-第16章はAlibabaCloudの基本プロダクトサービスの説明をしました。第17章-第25章はTerraformのサンプルコードを交えて解説します。
 17章 example: ssh踏み台サーバ 18章 example: SLB設定サンプル 19章 example: RDS設定サンプル 20章 example: kubernetes設定サンプル 21章 example: Webアプリケーション 22章 example: 高速コンテンツ配信 23章 example: オートスケーリング 24章 example: KubernetesによるコンテナでWordPress作成 25章 example: ECサイト構築  
25.1 ECサイト &amp;nbsp; インターネットを通じて自社商品を販売、宣伝するのにおすすめなのが、ECサイトを作るという方法です。ECは Electronic Commerce（電子商取引）の略です。 ECサイトの一つとして、オープンソースの電子商取引アプリケーション MagentoとWoo Commerce を使った構築方法がメインとなっています。Magento、もしくはWoo Commerce を使用すると、コーディングを一切行わなくてもオンラインストアをすばやく設定できます。それだけでなく多くの拡張機能、プラグイン、そしてテーマでカスタマイズすることもできます。今回は AlibabaCloud上にて高可用性アーキテクチャでMagento Community EditionをIaCで自動実装してみます。
 Magento Woo Commerce   
ちなみに、Amazonや楽天のように一つのWebサイトに複数の商店の商品やサービスがまとまっているものはオンラインモールといい、オープンソースのオンラインショッピング Webサイト管理システム EC-CUBEなどの方法があります。
 EC-CUBE   
25.2 ECサイトMagentoの構築について &amp;nbsp; ECサイト MagentoをTerraformを使って一発で構築してみます。ゴールの構成図は以下の通りです。 ソースは以下になります。サンプルソースは[こちら]()にあります。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/container_clustor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/container_clustor/</guid>
      <description> 第15章 AlibabaCloud Container Clustorについて &amp;nbsp; 第6章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第7章-第18章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第7章：AlibabaCloud VPC 第8章：AlibabaCloud ECS 第9章：AlibabaCloud NW関連（EIP/HTTP/DNS） 第10章：AlibabaCloud SLB 第11章：AlibabaCloud AutoScale 第12章：AlibabaCloud OSS 第13章：AlibabaCloud RDS 第14章：AlibabaCloud RAM 第15章：AlibabaCloud Container Clustor 第16章：AlibabaCloud Kubernetes 第17章：AlibabaCloud Kubernetes Managed 第18章：AlibabaCloud Container Registry  各章それぞれサンプルを交えて説明します。

15.1 Container Clustor &amp;nbsp; Terraformのコード構成要素、コードの構成文の書き方です。Terraformの利用ガイドラインに沿って記載してみてください。Terraformのバージョンによっては書き方が異なる場合がありますので、注意が必要です。
resource &amp;quot;alicloud_cs_kubernetes&amp;quot; &amp;quot;main&amp;quot; { name_prefix = xxxxx availability_zone = &amp;quot;${data.alicloud_zones.default.zones.0.id}&amp;quot; new_nat_gateway = true master_instance_type = &amp;quot;ecs.n4.small&amp;quot; worker_instance_type = &amp;quot;ecs.n4.small&amp;quot; worker_number = 10 password = xxxxxx pod_cidr = xxxxx service_cidr = xxxx enable_ssh = true install_cloud_monitor = true vswitch_id = xxxxxx }  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/container_registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/container_registry/</guid>
      <description>第18章 AlibabaCloud Container Registryについて &amp;nbsp; 第6章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第7章-第18章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第7章：AlibabaCloud VPC 第8章：AlibabaCloud ECS 第9章：AlibabaCloud NW関連（EIP/HTTP/DNS） 第10章：AlibabaCloud SLB 第11章：AlibabaCloud AutoScale 第12章：AlibabaCloud OSS 第13章：AlibabaCloud RDS 第14章：AlibabaCloud RAM 第15章：AlibabaCloud Container Clustor 第16章：AlibabaCloud Kubernetes 第17章：AlibabaCloud Kubernetes Managed 第18章：AlibabaCloud Container Registry  各章それぞれサンプルを交えて説明します。

18.1 Container Registry &amp;nbsp; Terraformのコード構成要素、コードの構成文の書き方です。Terraformの利用ガイドラインに沿って記載してみてください。Terraformのバージョンによっては書き方が異なる場合がありますので、注意が必要です。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/kubernetes_managed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/infrastructure-as-code/16/old/kubernetes_managed/</guid>
      <description>第17章 AlibabaCloud Kubernetes Managedについて &amp;nbsp; 第6章までは Terraformのインストール方法、コード記載方法、実行方法を説明しました。第7章-第18章はユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
 第7章：AlibabaCloud VPC 第8章：AlibabaCloud ECS 第9章：AlibabaCloud NW関連（EIP/HTTP/DNS） 第10章：AlibabaCloud SLB 第11章：AlibabaCloud AutoScale 第12章：AlibabaCloud OSS 第13章：AlibabaCloud RDS 第14章：AlibabaCloud RAM 第15章：AlibabaCloud Container Clustor 第16章：AlibabaCloud Kubernetes 第17章：AlibabaCloud Kubernetes Managed 第18章：AlibabaCloud Container Registry  各章それぞれサンプルを交えて説明します。

17.1 Kubernetes Managed &amp;nbsp; Terraformのコード構成要素、コードの構成文の書き方です。Terraformの利用ガイドラインに沿って記載してみてください。Terraformのバージョンによっては書き方が異なる場合がありますので、注意が必要です。</description>
    </item>
    
  </channel>
</rss>