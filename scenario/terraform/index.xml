<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on テクニカルリファレンス</title>
    <link>https://sbcloud.github.io/help/scenario/terraform/</link>
    <description>Recent content in Terraform on テクニカルリファレンス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 13 May 2019 16:20:40 +0900</lastBuildDate>
    
	<atom:link href="https://sbcloud.github.io/help/scenario/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSH踏み台サーバの作成</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/bastion-server/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/bastion-server/</guid>
      <description>17.1 ssh踏み台サーバ &amp;nbsp; クラウド上にてEC2やOSS、RDSなどにて個人情報や外部流出したくないしたくない危険なファイルがある場合、インターネットら外部からメインサーバが見える状態は極力避けたいです。それを防ぐために様々な手段がありますが、費用対効果の高いネットワーク構造として踏み台サーバを作る方法があります。踏み台サーバーとは、インターネットに直接繋がないサーバーをSSHで接続するために経由される、セキュリティ層の役割を満たすことができるサーバーのことです。踏み台サーバを使うことで、以下のメリットがあります。
 実行用など本番に使う各サーバに直接アクセスできないため、外部からの侵入リスクを軽減できる。 PublicIPを実行用など本番に使う各サーバに割る必要がないため、運用における負荷を軽減できる。 踏み台サーバから実行用など本番に使う各サーバへのログを残せるため、不正操作を防げれる。   構成としては以下の図通りになります。

&amp;nbsp; Terraformで踏み台サーバ、本番サーバを作ってみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。

ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、Bastion-Server-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.1.0/24 VPC の CIDR ブロック    vpc description 任意 Enable Bastion-Server vpc VPC の説明。   alicloud_vswitch vsw name 任意 ${var.project_name}-vswitch vswitch の名称。この例の場合、Bastion-Server-for-Terraform-vswitch として表示されます。    vsw vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>SLBの構築と設定</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/slb-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/slb-setting-sample/</guid>
      <description>&amp;nbsp; TerraformでロードバランサーであるSLBの構築と設計行ってみます。ゴールの構成図は以下の通りです。
ソースは以下になります。サンプルソースは[こちら]()にあります。
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable SLB-Setteing-Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.project_name}-vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/28&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; description = &amp;quot;Enable SLB-Setteing-Sample vswitch&amp;quot; } resource &amp;quot;alicloud_security_group&amp;quot; &amp;quot;sg&amp;quot; { name = &amp;quot;${var.project_name}_sg&amp;quot; description = &amp;quot;Marker security group for SLB-Setteing-Sample&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>RDSの構築と設定</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/rds-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/rds-setting-sample/</guid>
      <description>&amp;nbsp; TerraformでデータベースサービスであるRDSを作ってみます。ゴールの構成図は以下の通りです。
なおECSからRDS for MySQLへへ接続するためのdocker-compose.ymlファイルは以下の通りです。 
ソースは以下になります。サンプルソースは[こちら]()にあります。
main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable RDS Setting Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.project_name}-vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/28&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; description = &amp;quot;Enable RDS Setting Sample vswitch&amp;quot; } # DBを作成する resource &amp;quot;alicloud_db_instance&amp;quot; &amp;quot;db_instance&amp;quot; { engine = &amp;quot;MySQL&amp;quot; engine_version = &amp;quot;5.</description>
    </item>
    
    <item>
      <title>Kubernetesの構築と設定</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/kubernetes-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/kubernetes-setting-sample/</guid>
      <description>&amp;nbsp; 簡単なkuberntesクラスターを作ってみます。シングルゾーンによるクラスタでの作成になります。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable k8s-Sample vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.project_name}-vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/28&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; description = &amp;quot;Enable k8s-Sample vswitch&amp;quot; } resource &amp;quot;alicloud_cs_kubernetes&amp;quot; &amp;quot;k8s&amp;quot; { name = &amp;quot;${var.project_name}-k8s&amp;quot; vswitch_ids = [&amp;quot;${alicloud_vswitch.vsw.id}&amp;quot;] availability_zone = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>Webアプリケーションの構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/web-application/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/web-application/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。IDCなどデータセンターにて、スケーラブルで世界規模で利用可能なWebアプリケーションを開発および展開するのは、多くの手作業から工数がかかり、またトラフィックに応じてリソースの効率さが悪くなってしまう課題があります。しかしAlibabaCloudで構築すると、それらの課題が払拭されます。それだけでなく、上に、投資収益率（ROI）も向上するメリットがあります。
 すぐに着手できる配置構成 必要な分だけリソースを提供（オンデマンドサーバープロビジョニング） 単一障害点（SPOF）なし 多重層のセキュリティ保護あり  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.0.0/16&amp;quot; description = &amp;quot;VPC for ${var.project_name}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;web&amp;quot; { name = &amp;quot;${var.project_name}-web-vswitch&amp;quot; description = &amp;quot;Enable Web-Application web vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.default.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;app&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>高速コンテンツ配信の実現</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/accelerated-content-delivery/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/accelerated-content-delivery/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。従来のWebアプリケーションアーキテクチャでは、Webアプリケーションが大量のリクエストトラフィックを受け取ると、サーバーが過負荷になり、サイトが遅くなったりサーバーがクラッシュしたりする可能性があります。また地理的に異なる場所に分散していると、コンテンツが1か所から配信されるため、待ち時間の問題が発生する可能性があります。そのためにWebアプリケーションは高速でコンテンツ配信することが望ましいです。
 グローバル配信が可能 静的および動的コンテンツのアクセラレーション 待ち時間の短縮などパフォーマンス改善  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.0.0/16&amp;quot; description = &amp;quot;VPC for ${var.project_name}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;web&amp;quot; { name = &amp;quot;${var.project_name}-web-vswitch&amp;quot; description = &amp;quot;Enable Web-Application web vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.default.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;app&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>オートスケーリングの実現</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/auto-scaling/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/auto-scaling/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。
プロビジョニング済みのECSインスタンスをメインとするWebアプリケーションにて、予測が難しいトラフィックニーズに応じて、必要なECSインスタンス台数を増減してくれます。これにより、アプリケーションを止めることなく稼働し続けることが出来ます。同時にリソースに応じた需要増/減から必要なコスト管理も実現出来ます。
 アプリケーションの稼働時間・堅牢性向上 サーバーの自動プロビジョニング ニーズに応じたコスト管理  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.0.0/16&amp;quot; description = &amp;quot;VPC for ${var.project_name}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;web&amp;quot; { name = &amp;quot;${var.project_name}-web-vswitch&amp;quot; description = &amp;quot;Enable Web-Application web vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.default.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;app&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>KubernetesによるコンテナでWordPress作成</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/web-application-on-kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/web-application-on-kubernetes/</guid>
      <description>&amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。 1. AlibabaCloudでKubernetesクラスターを生成 1. kube_configを環境変数にて設定 1. KubernetesクラスターのローカルボリュームにてWordPressとMySQLをインストール
こちらはAlibabaCloud Terraformのサンプル集を通じての紹介になります。
Kubernetesでクラスタ生成 &amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。

&amp;nbsp; TerraformでWebアプリケーションを作ってみます。step1のゴール構成図は以下の通りです。

ソースは以下になります。サンプルソースは[こちら]()にあります。

main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; description = &amp;quot;Enable Web-App on k8s vpc&amp;quot; } resource &amp;quot;alicloud_vswitch&amp;quot; &amp;quot;vsw&amp;quot; { name = &amp;quot;${var.project_name}-vswitch&amp;quot; vpc_id = &amp;quot;${alicloud_vpc.vpc.id}&amp;quot; cidr_block = &amp;quot;192.168.1.0/28&amp;quot; availability_zone = &amp;quot;${var.zone}&amp;quot; description = &amp;quot;Enable Web-App on k8s vswitch&amp;quot; } resource &amp;quot;alicloud_cs_kubernetes&amp;quot; &amp;quot;k8s&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title> MagentoでECサイト構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/ec-site-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/ec-site-sample/</guid>
      <description>&amp;nbsp; インターネットを通じて自社商品を販売、宣伝するのにおすすめなのが、ECサイトを作るという方法です。ECは Electronic Commerce（電子商取引）の略です。 ECサイトの一つとして、オープンソースの電子商取引アプリケーション MagentoとWoo Commerce を使った構築方法がメインとなっています。Magento、もしくはWoo Commerce を使用すると、コーディングを一切行わなくてもオンラインストアをすばやく設定できます。それだけでなく多くの拡張機能、プラグイン、そしてテーマでカスタマイズすることもできます。今回は AlibabaCloud上にて高可用性アーキテクチャでMagento Community EditionをIaCで自動実装してみます。
 Magento Woo Commerce   
ちなみに、Amazonや楽天のように一つのWebサイトに複数の商店の商品やサービスがまとまっているものはオンラインモールといい、オープンソースのオンラインショッピング Webサイト管理システム EC-CUBEなどの方法があります。
 EC-CUBE   
ECサイトMagentoの構築について &amp;nbsp; ECサイト MagentoをTerraformを使って一発で構築してみます。ゴールの構成図は以下の通りです。
ソースは以下になります。サンプルソースは[こちら]()にあります。

 GUIでの操作方法もありますのでこちらも参考にしてください。  https://jp.alibabacloud.com/getting-started/projects/deploy-magento-on-alibaba-cloud?spm=a21mg.172235.898935.4.7b89497bUXnkWz
 ECSインスタンス１台にてMySQL、PHP、Magentoを入れる方法もあります。軽量でスモールスタートする場合、こちらも是非参照ください。 https://www.alibabacloud.com/help/doc-detail/50704.html  
STEP1: Magentoを利用するにあたり、アカウント発行が必要です。 1.Magentoサイトに入ります。 2.初回のみユーザ登録をします。 3.ユーザ登録で必要なフィールドを記載します。 4.設定が終わったらTopページに戻り、プロフィールのページを選定します。 5.Access Keyを選定します。 6.新規でAccess Keyを発行します。 7.Access Keyは用途ごとに使い分けられてるため、ここでPJ名など案件名を記載します。 8.これでMagento作成に必要なKey２種類の発行完了です。こちらは後々必要になるのでメモを残してください。 main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
  </channel>
</rss>