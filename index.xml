<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>テクニカルリファレンス</title>
    <link>https://sbcloud.github.io/help/</link>
    <description>Recent content on テクニカルリファレンス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 18 Jul 2019 10:37:37 +0900</lastBuildDate>
    
	<atom:link href="https://sbcloud.github.io/help/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ECS</title>
      <link>https://sbcloud.github.io/help/best-practice/product/ecs/</link>
      <pubDate>Thu, 18 Jul 2019 10:37:37 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/product/ecs/</guid>
      <description>ECSのベストプラクティス情報を以下のリンクよりダウンロードいただけます。
ECSのベストプラクティス情報をダウンロード
また本PDFは以下の流れで記載しております。
1 セキュリティ&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;1
1.1 セキュリティグループのベストプラクティス (パート 2)&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.1
1.2 セキュリティグループのベストプラクティス (パート 3)&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.6
1.3 ECS データセキュリティのベストプラクティス&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 11
1.4 クラシックネットワーク内のインスタンス同⼠のアクセスを設定する⽅法&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..13
1.5 既定のリモートアクセスポートの変更&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 20
1.6 Windows インスタンスでのログの使⽤&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 26
1.7 セキュリティが強化された Windows ファイアウォールの概要とベストプラクティス&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.. 28
1.8 セキュリティグループ内のインスタンスの分離&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..47
1.9 セキュリティグループの 5 つのルール&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.49
2 ディザスタリカバリソリューション&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 53
3 データリカバリ&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.58
3.1 誤って削除したデータを復元する⽅法&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 58
3.2 Linux インスタンスでのデータ復元&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip; 62
3.3 Windows インスタンスでのデータ復元&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 71
4 設定の優先度&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.75
4.1 複数インスタンスの⾔語の設定⽅法&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;. 75
5 モニター&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.80
5.1 CloudMonitor を使⽤した ECS インスタンスのモニター&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..80
6 インスタンス RAM ロールによる他のクラウドプロダクト API へのアクセス&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;83</description>
    </item>
    
    <item>
      <title>ECS</title>
      <link>https://sbcloud.github.io/help/faq/ecs/</link>
      <pubDate>Wed, 10 Jul 2019 15:31:42 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/ecs/</guid>
      <description>一般仕様 アベイラビリティゾーン（AZ）識別文字と実際のロケーションに関するマッピング仕様について Alibaba Cloudでは、アベイラビリティゾーン（AZ）識別文字と実際のロケーションのマッピングは、全てのアカウントで共通しています。
AWSにおいては、アカウント毎に個別にマップされます。 仕様が異なるのでご注意ください。
   1つのアカウント/リージョン配下のECS購入台数制限について 従量課金でのECSインスタンス購入上限は、vCPU数により制限されています。従量課金型ECSインスタンスの購入は各リージョン「50vCPU」までとなっております。なお、サブスクリプション型ECSの場合は、購入上限数を設けておりません。
例）お客様が1台のECSに対して4vCPUで利用する場合は、12台の従量課金ECSを購入することができます。
   サブスクリプションECSのライフサイクルについて サブスクリプションインスタンスの期間を更新しない、また更新失敗で有効期限切れとなった場合、そのインスタンスはライフサイクルに入ります。
例） 期間切れから〜15日まで：通常稼働
15日から〜30日まで：インスタンス停止
30日：インスタンスリリース（削除）
   RDSCALとクライアントCALの必要性について Alibaba Cloud が提供する Windows 仮想サーバーにて、RDS CALとクライアントCALの必要性は下記のとおりです。
Alibaba Cloud が提供する Windows 仮想サーバーの CAL ライセンスについて、リモートデスクトップユーザーのRDS CALはデフォルト2本付きです。3本以上が必要な場合、お客様にてご購入いただく必要があります。
クライアントCALについて、Alibaba Cloud は Microsoft 社と SPLA 契約しているため、Alibaba Cloud が提供する Windows 仮想サーバーは、別途クライアントCALを購入することなくご利用いただけます。
  ECSのデフォルトタイムゾーンについて リージョンに関わらず、ECSインスタンスのデフォルトタイムゾーンは、中国時間（UTC+8）になります。
なお、カスタムイメージのタイムゾーンはイメージ作成した際のものとなりますが、初回ECS作成直後でも中国ローカル時間になりますので、個別に時間自動同期（NTP）設定が必要となります。
  スナップショット取得時の性能影響について スナップショットの作成時は、ストレージのIO性能（最大10%低下）に影響します。
通常、稼働中のサービスへの影響はないと想定されますが、ストレージIOが少ない時間帯での取得を勧めします。
   購入可能な従量課金インスタンスの上限について 従量課金でのECSインスタンス購入上限は、vCPU数により制限されています。従量課金型ECSインスタンスの購入は各リージョン「50vCPU」までとなっております。なお、サブスクリプション型ECSの場合は、購入上限数を設けておりません。
例）お客様が1台のECSに対して4vCPUで利用する場合は、12台の従量課金ECSを購入することができます。
   25番ポートの制限について Alibaba Cloud では、MTAとしてメール送信（25 番ポートの外部接続）することが制限されております。</description>
    </item>
    
    <item>
      <title>Terraformとは</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/01/how-to-use/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/01/how-to-use/</guid>
      <description>&amp;nbsp; AlibabaCloudというクラウドサービスが登場したことで、クラウドサービス上にあるECSという仮想コンピューティングを作成・破棄するのが非常に簡単になりました。ボタン一つで数分でコンピューティングを起動できます。AlibabaCloudのマネジメントコンソールはWeb上にて操作する、数多くの機能をまとめた完成度の高いGUIです。
&amp;nbsp; しかし、Web上にてGUI操作とはいえ設定項目を一つ一つずつ画面上操作するのは骨が折れるのと、小規模サービスでも構築にヒューマンエラーや運用・学習コストはどうしても付き物になります。例えばAlibabaCloud未経験者がECSをCS 100台を手動起動してみましょう。この作業にどれほどの時間がかかるか、そしてミスをゼロにして稼働できるか、という課題があります。そこで解決の道となったのがInfrastructure as Code（以降は「IaC」と略します）です。
&amp;nbsp; IaCはコード通りの内容を自動で設定する仕組みを持ちます。IaCの種類はPackerやVagrantなど様々ですが、HashiCorp社がオープンソースとして手掛けるTerraformというマルチクラウド対応プロビジョニングツールがあります。シンプルなDSL(HCL)、自由自在な変数表現と状態管理が特徴です。
&amp;nbsp; TerraformはAlibabaCloudだけでなくAmazon Web Services 、GoogleCloudPlatform、MicrosoftAzure、Docker、OpenStackなど様々なインフラに幅広く対応しています。インフラを構築するためのプロビジョニングツールであり、開発者だけなく、運用担当者でも必要となりうるプロビジョニングツールです。
&amp;nbsp; Terraformは構築したいインフラの構成をテキスト形式のテンプレートファイルに定義します（Infrastructure as Code）。「どこのリージョン」「どのスペックのECS、どのリソースを使うか」「支払い方法」「展開方法」といったインフラの状態をコードとして記述し、ターミナルからコマンドを実行するだけでクラウド上に適用 (構築) が出来ます。逆に既存のリソースをTerraformでImportすることでコード化、同じ構成のコードを他リージョンで同様展開することも可能です。 他にIaCとしてPackerやVagrantがありますが、本ガイドラインとしてはTerraformを中心とした説明で進めます。 &amp;nbsp; 構成変更や他クラウドプロパイダからのマイグレーション、同じリソースで別リージョン、別アカウントにて展開するときにIaCがあることでエラーなくシームレスに移管ができます（リソースをGUIベースでコピーすることは不可能です。） また障害や高負荷など問題発生時でも環境を復元することができるメリットもあります。
&amp;nbsp; 加えて、コードからリソースを作成することで学習コスト・運用コストを削減することができます。例えば先ほどの例、AlibabaCloud未経験者がECS 100台を手動でなくIaC、Terraformで起動すると、ミスをゼロへ抑制はもちろん、学習工数・運用保守コスト・全てが大幅に節約できます。
&amp;nbsp; また、クラウド環境（仮想環境）が登場したことで、サーバらHW、物理的リソース制約がなくなりました。これにより、サーバやネットワークを簡単に構築したり、一旦構築したものをすぐに破棄することが出来るようになったので、一度構築したインフラやリソースは変更を加えることなく破棄して、新しいものを構築する考えが可能になりました。 →このような流れは「Immutable Infrastructure（不変のインフラ）」と呼ばれ、インフラ変更履歴を管理するのではなく、動作している「インフラの状態」を管理（=必要に応じて使い捨て）からクラウド環境ではコードによるインフラ構成・構築・管理・運用を行う必要があります。
&amp;nbsp; 前置きが長くなりましたが、クラウドサービスの良いところは立案した戦略や設計をすぐに試せれるところであり、AlibabaCloudの良いところは、PaaS/IaaS/SaaS/KaaS&amp;hellip;幅多くのプロダクトサービスがあり、これらの活用によってより楽に生産的にすることができる点です。是非楽しみながらAlibabaCloudのTerraformを読み進めていただければ大変幸いです。</description>
    </item>
    
    <item>
      <title>アカウント登録</title>
      <link>https://sbcloud.github.io/help/getting-started/registration/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/getting-started/registration/</guid>
      <description>Alibaba Cloudのアカウント登録マニュアルが以下のリンクよりダウンロードいただけます。
Alibaba Cloud登録マニュアルをダウンロード
また本アカウント登録手順は以下の流れで記載しております。
 各種登録手順のご案内
 環境設定 各種登録の流れ
  アカウントの登録手順  基本情報の入力 メールアドレスの確認 電話番号の確認 プロファイルの更新  クレジットカードの登録手順  クレジットカードの追加 有効化のための認証 本人確認チケット起票方法  アカウント登録後のお問い合わせ  チケットによるお問い合わせ   SBCloudホームページでも同様の内容が確認できます。 https://www.sbcloud.co.jp/document/account_registration</description>
    </item>
    
    <item>
      <title>アドバイザリ</title>
      <link>https://sbcloud.github.io/help/best-practice/advisory/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/advisory/</guid>
      <description>Alibaba Cloud 導入アドバイザリは下記リンクから取得可能です。
Alibaba Cloud導入アドバイザリをダウンロード
本書では、Alibaba Cloud上でシステムを構築する際の「アーキテクチャの設計」、「インフラストラクチャーの構築」、「セキュリティ」、「システム運用」の4点に関わるAlibaba Cloudの構成例をご紹介します。本書を一読頂くことで、一連のプラクティスを把握頂けます。
なお、本書は公開時点でのアドバイザリであり、時間の経過とともに、プロダクトの追加や機能追加・変更等で仕様が変更になる可能性があります。内容については随時更新を行ってまりますので、最新版をご参照下さい。
 用語集 本書に扱われるサービス一覧 Alibaba Cloudアーキテクチャの全体像 ネットワークの構成
4-1. Alibaba Cloudのネットワークの考え方
4-2. ネットワーク分割
4-3. アクセス経路
4-4. アクセス制御
 セキュリテイの構成
5-1. Alibaba Cloud責任共有モデル 5-2. ID&amp;amp;アクセスマネジメント 5-3. インフラセキュリティ 5-4. ログ管理 5-5. データ保護
 運用機能
6-1 システム監視
6-2 パッチ管理
6-3 バックアップ管理
6-4 ジョブ管理
6-5 構成管理
  </description>
    </item>
    
    <item>
      <title>サービスラインナップ比較</title>
      <link>https://sbcloud.github.io/help/getting-started/cloud-users/vs-aws-gcp-azure/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/getting-started/cloud-users/vs-aws-gcp-azure/</guid>
      <description>AlibabaCloudというクラウドサービスにて2019年5月現在、中国版、国際版、日本版の３つのサービスが展開されているので、それぞれのサービス比較をまとめてみました。
AWS/Azure/GCPとの比較について ※ AlibabaCloud公式によるAWSとの比較はこちらを参照。 https://help.aliyun.com/document_detail/65455.html
※ AlibabaCloud公式によるAzureとの比較はこちらを参照。 https://help.aliyun.com/document_detail/74242.html
コンピューティング（弹性计算）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      云服务器 ECS クラウドサーバ Elastic Compute Service Elastic Compute Service EC2 Virtual Machines Compute Engine    弹性裸金属服务器（神龙） Bare Metalクラウドサーバ ECS Bare Metal Instance ECS Bare Metal Instance EC2 Bare Metal Virtual Machines Compute Engine    轻量应用服务器 軽量アプリケーションサーバー Simple Application Server        GPU 云服务器 GPUクラウドサーバ Elastic GPU Service Elastic GPU Service EC2 Elastic GPUs Virtual Machines Compute Engine    FPGA 云服务器 FPGAクラウドサーバ   AWS EC2 FPGA Virtual Machines Compute Engine    专有宿主机 専有ホスト Dedicated Host Dedicated Host       超级计算集群 スーパーコンピューティングクラスター（SCC） Super Computing Cluster Super Computing Cluster       弹性高性能计算 E-HPC 高性能コンピューティング（E-HPC） E-HPC E-HPC High Performance Computing (HPC)      批量计算 バッチ計算 Batch Compute        容器服务 コンテナサービス Container Service Container Service AWS ECS Container Service -    容器服务 Kubernetes 版 コンテナサービスKubernetes版 Container Service for Kubernetes Container Service for Kubenetes Elastic Container Service for Kubernetes Kubernetes Service Google Kubernetes Engine    弹性容器实例 ECI サーバレスコンテナサービス Elastic Container Instance  Fargate Container Instance -    容器镜像服务 コンテナミラーリングサービス Container Registry  Elastic Container Registry Container Registry Google Container Registry    弹性伸缩 Auto Scaling Auto Scaling Auto Scaling EC2 Auto Scaling Virtual Machine Scale Sets Autoscaling    资源编排 リソースの作成と管理サービス Resource Orchestration Service Resource Orchestration Service AWS CloudFormation Resource Manager Cloud Deployment Manager    函数计算 Function as a Service Function Compute Function Compute AWS Lambda Functions Cloud Functions    图形工作站 GPUワークステーション         ストレージ（存储服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      对象存储 OSS オブジェクトストレージ Object Storage Service Object Storage Service S3 Blob Storage Cloud Storage    块存储 ブロックストレージ Block Storage Block Storage EBS Managed Disk 永続ディスク    文件存储 NAS ファイルストレージNAS Network Attached Storage Network Attached Storage Elastic File System (EFS) File Storage Cloud Filestore    文件存储 CPFS クラウドパラレルファイルストレージ         文件存储 HDFS HDFSファイルストレージ         智能云相册 クラウドフォトアルバム         智能媒体管理 インテリジェントメディア管理         云存储网关 クラウドストレージゲートウェイ   AWS Storage Gateway StorSimple     混合云存储阵列 ハイブリッドクラウドストレージアレイ Hybrid Cloud Storage Array        CDN配信（CDN与边缘）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      CDN Content Delivery Network Alibaba Cloud CDN Alibaba Cloud CDN CloudFront CDN Cloud CDN    安全加速 SCDN Secure Content Delivery Network         全站加速 DCDN Dynamic Route for CDN Dynamic Route for CDN Dynamic route for CDN       PCDN P2P CDN         边缘节点服务 ENS Edge Node Service         データベース（数据库）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      云数据库 POLARDB MySQL、Oracle、PostgreSQLの互換性があるクラウドデータベース   Aurora  Cloud Spanner    云数据库 RDS MySQL 版 MySQL ApsaraDB RDS for MySQL ApsaraDB for RDS(MySQL) RDS for MySQL/Aurora Database for MySQL Cloud SQL for MySQL    云数据库 RDS MariaDB TX 版 MariaDB ApsaraDB for MariaDB TX  RDS for MariaDB Database for MariaDB     云数据库 RDS SQL Server 版 SQLServer ApsaraDB RDS for SQL Server ApsaraDB for RDS(SQL Server) RDS for SQL Server SQL Database Cloud SQL for SQL Server    云数据库 RDS PostgreSQL 版 PostgreSQL ApsaraDB RDS for PostgreSQL ApsaraDB for RDS(PostgreSQL) RDS for PostgreSQL/Aurora Database for PostgreSQL Cloud SQL for PostgreSQL    云数据库 RDS PPAS 版 Oracle ApsaraDB RDS for PPAS ApsaraDB for RDS(PPAS) RDS for Oracle      分布式关系型数据库服务 DRDS 分散リレーショナルデータベースサービス Distributed Relational Database Service  Aurora  Cloud Spanner    云数据库 Redis 版 Redis ApsaraDB for Redis ApsaraDB for Redis ElastiCache (Redis) Cache for Redis Cloud Memorystore    云数据库 MongoDB 版 MongoDB ApsaraDB for MongoDB ApsaraDB for MongoDB DocumentDB (with MongoDB compatibility) Cosmos DB(API for MongoDB)     TSDB 时序时空数据库 時系列データベース High-Performance Time Series Database  Timestream Time Series Insights     云数据库 HBase 版 Apache Hbase     Cloud Bigtable   iconなし 图数据库 GDB グラフデータベース   Neptune Cosmos DB(API for Gremlin)     云数据库 Memcache 版 Memcache ApsaraDB for Memcache ApsaraDB for Memcache ElastiCache (Memcached)  Cloud Memorystore    表格存储 TableStore TableStore(NoSQL) Table Store Table Store DynamoDB Cosmos DB Cloud Datastore    分析型数据库 MySQL版 MySQLをベースにした分析データベース         分析型数据库 PostgreSQL版 DWH分析データベース HybridDB for PostgreSQL AnalyticDB for PostgreSQL Redshift SQL Data Warehouse Google BigQuery    HybridDB for MySQL HybridDB for MySQL         Data Lake Analytics データレイクアナリティクス Data Lake Analytics  Athena Data Lake Analytics Google BigQuery    数据管理 DMS データ管理サービス         混合云数据库管理 HDM ハイブリッドクラウドデータベース管理サービス         クラウド通信サービス（云通信）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      短信服务 ショートメッセージサービス         语音服务 音声メッセージサービス         流量服务 移動体通信データパッケージ         物联网无线连接服务 IoT無線通信接続サービス        iconなし 号码隐私保护 モバイルプライバシー保護サービス         号码认证服务 番号認証サービス         ネットワーク（网络）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 云通信网络加速 クラウド通信ネットワーク高速化サービス         专有网络 VPC 専用ネットワークVPC Virtual Private Cloud Virtual Private Cloud VPC Virtual Network Cloud VPN    云解析 PrivateZone VPCのDNSサービス Alibaba Cloud PrivateZone        负载均衡 SLB 負荷分散ロードパランサ Server Load Balancer Server Load Balancer AWS Global Accelerator Traffic Manager Cloud Load Balancing    NAT 网关 NATゲートウェイ NAT Gateway NAT Gateway Internet Gateway、NAT Instance、NAT Gateway      弹性公网 IP パブリックIPリソース Elastic IP Elastic IP Elastic IP Addresses     iconなし IPv6 转换服务 IPv6変換サービス         IPv6 网关 IPv6ゲートウェイ         全局流量管理 Global Traffic Manager Global Traffic Manager Global Traffic Manager Route 53（Traffic policy) Traffic Manager Global Load Balancing   iconなし 共享带宽 帯域幅共有サービス         共享流量包 クラウド間のデータ転送 Data Transfer Plan    Cloud Storage Transfer Service    云企业网 Cloud Enterprise Network Cloud Enterprise Network Cloud Enterprise Network       VPN 网关 VPNゲートウェイ VPN Gateway VPN Gateway VPN Gateway      智能接入网关（邀测中） オンプレミスからのデータ転送 Smart Access Gateway  AWS DataSync      高速通道 専用線接続 Express Connect Express Connect AWS Direct Connect ExpressRoute Dedicated Interconnect    基本的なセキュリティ（基础安全）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      DDoS高防IP DDoS 対策 (DDoS Pro) Anti-DDoS Pro        DDoS基础防护服务 DDoS 対策 (DDoS Basic) Anti-DDoS Basic Anti-DDoS Basic AWS Shield Standard DDoS Protection     DDoS高防（国际） DDoS 対策 (Premium) Anti-DDoS Premium  AWS Shield Advanced DDoS Protection Cloud Armor    新BGP高防IP DDoS 対策 (DDoS BGP)         Web应用防火墙 Webアプリケーションファイアウォール Web Application Firewall Web Application Firewall AWS WAF Application Gateway Cloud Armor    云安全中心（态势感知） クラウドセキュリティセンター Threat Detection Service        云盾混合云 クラウド、IDC、ハイブリッドクラウドでのセキュリティ保護サービス         云安全中心（安骑士） ホストセキュリティソフトウェア Server Guard        云防火墙 クラウドファイアウォール   AWS Firewall Manager Firewall     堡垒机 セキュリティ監査管理プラットフォーム         漏洞扫描 脆弱性スキャンサービス         网站威胁扫描系统 Webサイト脅威スキャンサービス Website Threat Inspector  GuardDuty Security Center Cloud Security Command Center    アイデンティティ管理（身份管理）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      访问控制 アカウント権限管理 Resource Access Management Resource Access Management AWS Identity and Access Management Active Directory Cloud IAM    データセキュリティ（数据安全）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      SSL 证书 SSL/TLS証明書管理サービス SSL Certificates Service SSL Certificates Service AWS Certificate Manager App Service Certificates Google-managed SSL certificates    数据库审计 データベース監査サービス         加密服务 暗号化サービス        iconなし 敏感数据保护 機密データ保護サービス   AWS Secrets Manager Key Vault     密钥管理服务 キー管理 Key Management Service Key Management Service AWS Key Management Service, AWS CloudHSM, AWS Secrets Manager Key Vault Cloud Key Management Service    ビジネスセキュリティ（业务安全）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      游戏盾 ゲームシールド GameShield        内容安全 コンテンツセキュリティ Content Moderation        风险识别 リスク識別と特定サービス         实人认证 人物識別・認証サービス         爬虫风险管理 Webクローラーやbotから防御するサービス Anti-Bot Service        セキュリティサービス(安全服务)    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      安全管家 セキュリティテクノロジおよびコンサルティングサービス Managed Security service       iconなし 渗透测试 侵入テスト         安全众测 セキュリティテスト   Inspector Security Center Cloud Security Command Center   iconなし 等保咨询 セキュリティコンサルティングサービス   Inspector Security Center Cloud Security Command Center   iconなし 应急响应 セキュリティ緊急対応サービス        iconなし 漏洞扫描 脆弱性スキャンサービス        iconなし 安全培训 セキュリティトレーニング        iconなし 安全评估 セキュリティ評価サービス        iconなし 代码审计 ソースコード監査        iconなし 安全加固 セキュリティ強化サービス        iconなし 安全通告 セキュリティ監視通知サービス        iconなし PCI DSS合规咨询 PCI DSSサービス         ビッグデータ計算（大数据计算）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      MaxCompute MaxCompute MaxCompute MaxCompute Redshift SQL Data Warehouse BigQuery    E-MapReduce E-MapReduce、Hadoopクラスタの展開 E-MapReduce E-Mapreduce EMR HDInsight Cloud Datalab, Cloud Dataproc    实时计算 Realtime Compute（元はApache Flink） Realtime Compute Realtime Compute       データの可視化（数据可视化）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      DataV数据可视化 DataV、データの可視化 DataV DataV       ビッグデータの検索と分析（大数据搜索与分析）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      开放搜索 分散検索エンジンプラットフォーム   CloudSearch Search     日志服务 各種ログの一元管理 Log Service Log Service Kinesis, SQS Event Hubs, Stream Analytics Cloud Dataflow, Cloud Pub/Sub    Elasticsearch ElasticSearch Elasticsearch Elasticsearch Elasticserach Service      关系网络分析 リレーショナルネットワーク分析         画像分析 画像分析サービス         公众趋势分析 トレンド分析サービス         Quick BI BIツール Quick BI Quick BI QuickSight Power BI Data Studio    データ開発（数据开发）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      DataWorks データの可視化 DataWorks DataWorks       Dataphin データ構築と管理サービス Dataphin        阿里云DataHub ストリーム処理   Kinesis, SQS Event Hubs, Stream Analytics Cloud Dataflow, Cloud Pub/Sub    数据集成 データ統合 Data Integration Data Integration       データのレコメンデーション（数据开发）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      企业图谱 コーポレートマップ        iconなし 智能推荐 スマートレコメンデーション         インテリジェントな音声対話（智能语音交互）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      录音文件识别 録音ファイルの認識（Speech-to-Text）   Transcribe Speech Services Cloud Speech-to-Text    实时语音转写 リアルタイム音声転写         一句话识别 一文認識（Text-to-Speech）   Polly Speech Services Cloud Text-to-Speech    语音合成 音声合成         语音合成声音定制 音声データの合成およびカスタマイズ         语音模型自学习工具 音声モデル自己学習ツール         画像検索（图像搜索）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      图像搜索 画像検索 Image Search Image Search       自然言語処理（自然语言处理）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      多语言分词 テキスト上の多言語の単語・分詞の分割サービス   Comprehend Language Understanding Cloud Natural Language    词性标注 品詞タグ付けの一部         命名实体 名前付きエンティティ         情感分析 感情分析         中心词提取 中心語抽出         智能文本分类 インテリジェントテキスト分類         文本信息抽取 テキスト情報抽出         商品评价解析 製品レビューの評価分析         印刷テキスト認識（印刷文字识别）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      通用型卡证类 IDカード、銀行カード、パスポートなどカード識別サービス         汽车相关识别 免許証・ナンバープレートなど自動車関連データの識別サービス         行业票据识别 請求書・領収書の識別サービス         资产类识别 資産証明書など各証明書識別サービス         通用文字识别 画像データのテキスト認識         行业文档类识别 業界文書データのテキスト認識サービス         视频类文字识别 ビデオデータ内の字幕および文字テキスト認識サービス         自定义模板识别 ORCカスタムテンプレートを作成し認識するサービス         顔認識（人脸识别）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      人脸识别 顔認識         機械翻訳（机器翻译）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      机器翻译 機械翻訳   Translate Translator Text Cloud Translation    画像認識（图像识别）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      图像识别 画像認識   Rekognition Computer Vision Cloud Vision    コンテンツセキュリティ（内容安全）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      图片鉴黄 ポルノコンテンツ認識         图片涉政暴恐识别 写真データからテロ画像や政治的問題画像識別サービス         图片Logo商标检测 画像からロゴ検出サービス         图片垃圾广告识别 画像スパム認識         图片不良场景识别 薬物使用、ギャンブルなどの不適切なコンテンツ認識サービス         图片风险人物识别 画像から人物特定リスク識別サービス         视频风险内容识别 ビデオリスクのコンテンツ認識         文本反垃圾识别 テキストリスクのコンテンツ認識         语音垃圾识别 音声データのリスク識別サービス         機械学習プラットフォーム（机器学习平台）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      机器学习平台 PAI 機械学習プラットフォームPAI Machine Learning Platform For AI  SageMaker Machine Learning Service Cloud ML Engine   iconなし 人工智能众包 AIによるクラウドソーシング         ドメイン名とウェブサイト（域名与网站）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      域名注册 ドメイン登録サービス         域名交易 ドメイン名取引サービス         网站建设 ウェブサイト構築サポートサービス         云虚拟主机 クラウド仮想ホスト Web Hosting        海外云虚拟主机 国外Webホスティング設置サービス         云解析 DNS DNS Domains Alibaba Cloud DNS Route 53 DNS Cloud DNS    弹性Web托管 柔軟なWebホスティング   Elastic Beanstalk App Service App Engine   iconなし 备案 ドメイン登録(IPC)のためのICP代替申請サービス         知的財産サービス（知识产权服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      商标注册 商標登録サービス         商标交易 商標登録されてるものを購入するサービス         申請サービス（应用服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 机器人流程自动化 RPA RPA         云桌面 クラウドデスクトップ         云AP クラウドAP         API 网关 API管理 API Gateway API Gateway API Gateway API Management Cloud Endpoints/Apigee    企业邮箱 ビジネスメールボックス Alibaba Mail        邮件推送 メール送受信サービス DirectMail  Simple Email Service      インテリジェントデザインサービス（智能设计服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 鹿班 画像自動生成サービス         モバイルクラウド（移动云）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      移动推送 モバイルアプリの通知とメッセージングサービス         移动热修复 モバイルサービスのhot-fixサービス         移动测试 モバイルテストサービス   AWS Device Farm  Cloud Test Lab    移动数据分析 モバイルアプリデータ統計サービス         移动用户反馈 モバイルアプリからのフィードバックサービス        iconなし HTTPDNS モバイル開発者向けのドメイン名解決サービス         ビデオクラウド（视频云）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      音视频通信 RTC オーディオとビデオ通信RTC         视频直播 ライブビデオ ApsaraVideo Live ApsaraVideo Live AWS Elemental MediaLive Media Services - Live and On-demand Streaming     视频监控 ビデオ監視サービス         视频点播 オンデマンドオーディオ/ビデオストリーミングサービス ApsaraVideo VOD  AWS Elemental MediaPackage Media Services     媒体处理 メディア変換 ApsaraVideo for Media Processing ApsaraVideo for Media Processing Elastic Transcoder/AWS Elemental MediaConvert Media Services - Encoding (Anvato)    视频审核 ビデオ検閲サービス。ポルノや政治など禁止事項の特定をメイン         视频DNA ビデオ監査サービス。映像データから重複排除をメイン         视频智能生产 ビデオ制作サービス。映像を識別しリアルタイムでハイライトを生成         视频多模态内容理解 ビデオコンテンツ識別サービス。視覚情報、テキスト、音声および動作から家庭用品、自動車、動物、植物など1000以上のカテゴリを特定         智能封面 ビデオデータやコンテンツから最適なビデオカバー提供         智能视觉 ビデオインテリジェント。画像分類、画像検出、ビデオ分類、ビデオ認識、ライブ識別         プライベートクラウド（专有云）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      Apsara Stack オンプレミスによるAlibabaCloudサービス Apsara Stack  AWS Outposts Stack Cloud Platform Service    メッセージキューMQ（消息队列 MQ）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      消息队列 RocketMQ 分散メッセージミドルウェア   Simple Queue Service Queue Storage     消息队列 AMQP RabbitMQによるメッセージキュー         微消息队列 for IoT IoT向けマイクロメッセージキュー         消息队列 Kafka kafkaによるメッセージキュー   Managed Streaming for Kafka      消息服务 MNS 分散型メッセージキューサービス Message Service Message Service SQS (Simple Queue Service), SNS (Simple Notification Service), MQ Queue Storage, Service Bus Google Pub/Sub, GAE の Task Queue   iconなし 微服务 マイクロサービス         企业级分布式应用服务 EDAS エンタープライズ分散アプリケーションサービスEDAS Enterprise Distributed Application Service        应用配置管理 ACM アプリケーション構成管理ACM Application Configuration Management        全局事务服务 GTS グローバルトランザクションサービス         インテリジェントカスタマーサービス（智能客服）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      云呼叫中心 クラウドコールセンター         云小蜜 NLPベースの会話ロボットサービス   Lex Bot Service (Dialogflow)    智能对话分析 知的対話分析         云客服 クラウドカスタマーサービス         ブロックチェーン（区块链）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      区块链服务 ブロックチェーンサービス Blockchain as a Service Blockchain as a Service Managed Blockchain、Quantum Ledger Database Blockchain Service、Blockchain Workbench     SaaSアクセラレータ（SaaS加速器）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      宜搭 GUIベース開発サービス         モノのインターネットプラットフォーム（物联网平台）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      物联网设备接入 IoTデバイスへのアクセス         生活物联网平台 Life Internet of Thingsプラットフォーム         物联网设备管理 IoTデバイス管理         物联网数据分析 モノのインターネットデータ分析   AWS IoT Analytics Stream Analytics/Time Series Insights    iconなし 物联网一站式开发 IoT 開発Studio   AWS IoT Things Graph IoT Central     低電力WAN（低功耗广域网）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      物联网络管理平台 IoTネットワーク管理プラットフォーム         物联网无线连接服务 IoT無線通信接続サービス         エッジサービス（边缘服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      物联网边缘计算 IoTエッジコンピューティング   AWS Greengrass IoT Edge Cloud IoT Edge   iconなし 视频边缘智能服务 ビデオエッジインテリジェンスサービス         設備サービス（设备服务）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし AliOS Things Alibaba Cloud用IoTオペレーティングシステム         IoTセキュリティ（物联安全）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 物联网设备身份认证 IoTデバイスアイデンティティ認証   AWS IoT Core IoT Hub Cloud IoT Core   iconなし 物联网安全运营中心 IoTセキュリティオペレーションセンター   AWS IoT Device Defender     iconなし 物联网可信执行环境 IoT実行環境アプリケーション   AWS IoT 1-Click     iconなし 物联网可信服务管理 IoTサービス集約管理プラットフォーム   AWS IoT Device Management IoT Hub Cloud IoT Core    ソフトとハードの統合アプリケーション（软硬一体化应用）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 魔笔 手書きデータの認識サービス（マジックペン）         云投屏 クラウドプロジェクションスクリーン         関連クラウド製品（相关云产品）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      智联车管理云平台 Zhilian自動車メーカー向けの自動車管理クラウドプラットフォーム         エコロジー（生态）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 物联网市场 IoTアプリケーション購入市場        iconなし ICA物联网标准联盟 IoTConnectivityAlliance、IoTアライアンス        iconなし 物联网测试认证服务 IoTテストおよび認証サービス         バックアップ、移行、および災害復旧（备份、迁移与容灾）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      混合云备份服务 ハイブリッドクラウドのバックアップサービス         混合云容灾服务 ハイブリットクラウドの災害復旧サービス         数据库备份 DBS データベースバックアップ Database Backup Database Backup       数据传输 DTS データ転送サービス Data Transmission Service Data Transmission Service AWS Database Migration Service, AWS Schema Conversion Tool Database Migration Service     数据库和应用迁移 ADAM データベースとアプリケーション移植サービス         闪电立方 オンラインとオフラインのデータ転送サービス（Lightning Cube）        iconなし 迁移工具 Qianyun移植ツール         開発者プラットフォーム（开发者平台）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      云效 DevOpsサービス        iconなし 开发者中心 デベロッパーセンター         物联网开发者平台 IoTプラットフォーム         APIとツール（API与工具）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし Cloud Toolkit クラウド開発ツールキット   AWS CodeStar DevOps     OpenAPI Explorer OpenAPI Explorer        iconなし API 控制中心 APIコンソール        iconなし API 全集 APIプラットフォーム        iconなし API 错误中心 APIエラーセンター        iconなし SDK 全集 Alibaba Cloud SDKプラットフォーム   AWS Cloud9 (Visual Studio Online) (Cloud Shell Code editor)    云命令行 Cloud Shell Cloud Shell Cloud Shell AWS Systems Manager Session Manager Cloud Shell Cloud Shell    プロジェクトコラボレーション（项目协作）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 项目协作 クラウドエンタープライズコラボレーション         コードホスティング、倉庫（代码托管、仓库）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      代码托管 Gitライブラリホスティングサービス   AWS CodeCommit Repos Cloud Source Repositories   iconなし Maven公共仓库 Maven Public Warehouse        iconなし 制品仓库 Maven製品管理サービス         統合配送（集成交付）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP     iconなし 持续交付 継続的配信サービス         CodePipline パイプライン   AWS CodePipeline Pipelines Cloud Build    テスト（测试）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      性能测试 PTS パフォーマンステストサービス        iconなし 测试平台 クラウドサービス上のテストプラットフォーム         開発と運用（开发与运维）    icon 中国サイト コメント 国際サイト 日本サイト AWS Azure GCP      应用实时监控服务 アプリケーションリアルタイム監視サービス         云监控 クラウドモニタリング CloudMonitor CloudMonitor CloudWatch Events Event Grid、Monitor Stackdriver Monitoring   iconなし 智能顾问 AlibabaCloudコンサルティングサービス         应用高可用服务 AHAS Application High Availability Service         Node.</description>
    </item>
    
    <item>
      <title>プロダクト資料のリンク一覧</title>
      <link>https://sbcloud.github.io/help/getting-started/product/links/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/getting-started/product/links/</guid>
      <description> 頻繁に利用されるプロダクトの活用リンク一覧を記載します。
主要プロダクト    製品名 コンテンツテーマ URL     ECS プロダクト紹介 公式ドキュメント   ECS クイックスタート 公式ドキュメント   RDS プロダクト紹介 公式ドキュメント   SLB プロダクト紹介 公式ドキュメント   VPC プロダクト紹介 公式ドキュメント   ExpressConnect プロダクト紹介 公式ドキュメント   CloudMonitor プロダクト紹介 公式ドキュメント   OSS プロダクト紹介 公式ドキュメント    人気のプロダクト    製品名 コンテンツテーマ URL     Container Service for Kubernetes プロダクト紹介 公式ドキュメント   MaxCompute プロダクト紹介 公式ドキュメント   Realtime Compute プロダクト紹介 公式ドキュメント   Image Search プロダクト紹介 公式ドキュメント   Anti-DDoS プロダクト紹介 公式ドキュメント    </description>
    </item>
    
    <item>
      <title>サイトマップ</title>
      <link>https://sbcloud.github.io/help/about/sitemap/</link>
      <pubDate>Mon, 13 May 2019 16:20:40 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/about/sitemap/</guid>
      <description>   トップページ         Getting Started     アカウント登録   プロダクト紹介プロダクト資料のリンク一覧
ECS   AWS/Azure/GCPユーザ向けAWS/Azure/GCPとのサービス比較       ベストプラクティス     アドバイザリ   料金体系   個別プロダクトECS   DevOpsTerraformTerraformとは
インストール
サンプルプロジェクトの作成
サンプルプロジェクトの実行
文法について
Dockerについて
Moduleについて
VPCの作成
ECS、EIPの作成
SLBの作成
Autoscalingの作成
OSSの作成
RDSの作成
RAMの作成
Kubernetesの作成       よくある質問     ECS   RDS   SLB   OSS   料金   アカウント       About SBC Technical Reference     サイトマップ    </description>
    </item>
    
    <item>
      <title>ECSの使用可能なRegion/Spec/Price紹介</title>
      <link>https://sbcloud.github.io/help/getting-started/product/ecs-by-region/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/getting-started/product/ecs-by-region/</guid>
      <description>ap-northeast-1    instanceType vCPU  メモリ  イントラネット帯域幅 パケット転送速度  GPU/FPGA  ローカルストレージ  OS 従量課金 サブスクリプション サブスクリプション     ecs.c5.large 2 vCPU 4 GiB 1 Gbps 300,000 PPS - - linux ￥ 9.8 JPY /時間 ¥ 5170.00 JPY /月 ¥ 52734.00 JPY /年   ecs.c5.large 2 vCPU 4 GiB 1 Gbps 300,000 PPS - - windows ￥ 17.7 JPY /時間 ¥ 10710.00 JPY /月 ¥ 109242.</description>
    </item>
    
    <item>
      <title>OSS</title>
      <link>https://sbcloud.github.io/help/faq/oss/</link>
      <pubDate>Wed, 17 Jul 2019 09:33:15 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/oss/</guid>
      <description>一般仕様 中国東部1のOSSを利用しなくても課金される事象について OSSコンソールでのパケット操作は実質上にAPIで実行されています。
GetBucketなどのようなパケットを特定しないに操作以外、共通な属性を取得するようなリクエストを実行された場合、デフォルトで中国東部１リージョンのエンドポイントが利用される仕様となります。
コンソールからのAPIリクエストにより発生した料金は中国東部1のパケットに記録されますので、中国東部1のOSSを利用しなくても課金される事象の原因となります。
   標準、IA、アーカイブの違いについて 標準ストレージと比較する場合、低頻度アクセスストレージに保存したファイルを30日以内、アーカイブストレージは60日以内に削除した場合、料金がかかります。
そして、アーカイブストレージからファイルを取り出す場合、解凍時間が必要となります。
標準ストレージ
高パフォーマンス、高信頼性、高可用性を実現する OSS インスタンス
特徴：高スループット、ホットファイル、頻繁なアクセスを特徴とするサービスシナリオに適用可能
信頼性: 99.999999999%
最小保存期間：なし
適用シナリオ: モバイルアプリケーション、大規模な Web サイト、画像共有、アクセス頻度の高いオーディオとビデオ
低頻度アクセスストレージ
比較的低いストレージコストとリアルタイムのアクセスを特徴とする OSS インスタンス
特徴： リアルタイムの低頻度データアクセスをサポートするサービスシナリオに適用可能
信頼性: 99.999999999%
最小保存期間：30 日
適用シナリオ： アプリケーションデータとエンタープライズデータのバックアップ、モニタリングデータ、オンラインストレージアプリケーション
アーカイブストレージ
低単価で長期のアーカイブデータストレージをサポートする OSS インスタンス
特徴: データ復元の待機時間が発生し、データ保管期間に関する要件があるサービスシナリオに適用可能
信頼性: 99.999999999%
最小保存期間：60 日
適用シナリオ: 長期のアーカイブデータストレージ、医療用画像、ビデオ映像
   クロスリージョンレプリケーションの利用制限について クロスリージョンレプリケーションは対応していますが、中国本土リージョン間、またはアメリカ東部、西部間のみとなります。その以外のリージョンでは、現状中間サーバーを経由する必要があります。
クロスリージョンレプリケーションは下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/31864.htm
   パケット間のファイル複製方法について 下記の前提条件であれば、OSSBrowserを利用してコピー/移動することが可能です。
・同じリージョンの別バケット間のコピー/移動
・標準パケットからアーカイブパケットへのコピー/移動
※アーカイブパケットから標準パケットへのコピー/移動も可能ですが、事前にアーカイブファイルを解凍する必要があります。 一括解凍機能がないため、多数ファイルの場合、手間かかります。
手順は下記となります。
・ソースパケットのルートディレクトリにて全ファイルを選択し、「コピー」または「移動」をクリック
・ターゲットのアーカイブパケットのルートディレクトリにて、「ペースト」をクリック
OSSBrowserのダウンロードは下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/61872.html
   5G以上のファイルのアップロード方法について コンソールからアップロード可能のファイルサイズは5GBまでなります。5GB以上のファイルをアップロードする場合、APIまたはSDKを利用する必要があります。</description>
    </item>
    
    <item>
      <title>インストール</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/02/install/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/02/install/</guid>
      <description>本章は Terraform のインストール方法を学びます。
 ※ Mac/Linuxでのインストール方法になります。Windows版でのTerraform導入方法は別途記載予定です。 ※ Terraformバージョン違いを防止するためにtfenvで管理をする方法がありますが、これとは別に Dockerを使った方法もありますので参考にしてください。
 1. Homebrew &amp;nbsp; Terraformは前章で説明した通り、HashiCorp社がオープンソースとして展開してるツールです。基本的にはバージョンアップに 追従しやすい tfenv の利用を推奨しますが、お試しであればHomebrew も手軽です。 macOS の場合は次のように、Homebrew を使ってインストールできます。
$ brew install terraform $ terraform --version Terraform v0.11.13  
2. tfenv tfenvは Terraformのバージョン管理マネージャです。 tfenvを使うことで、異なるバージョンのTerraformを差異なく利用できます。
$ brew install tfenv $ tfenv --version tfenv 0.6.0  完了したら、インストール可能なTerraform のバージョンを確認します。
$ tfenv list-remote 0.12.0-beta1 0.11.13 ・・・  最新の安定バージョンかつAlibabaCloud Terraform対応は 0.11.13です。0.11.13を次のようにインストールします。
$ tfenv install 0.11.13  terraformには .terraform-versionというファイルがあり、こちらにバージョンを記述すると、そのバージョンを自動的にインストールできます。
$ echo 0.11.13 &amp;gt; .</description>
    </item>
    
    <item>
      <title>SLB</title>
      <link>https://sbcloud.github.io/help/faq/slb/</link>
      <pubDate>Mon, 15 Jul 2019 15:32:45 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/slb/</guid>
      <description>一般仕様 レイヤー4とレイヤー7のSLBの違いについて SLBはレイヤ4 (TCP、UDP)およびレイヤ7(HTTP、HTTPS)を提供しています。
レイヤ 4 SLB は、ロードバランシングを実現するために keepalived のオープンソースソフトウェアの Linux 仮想サーバー（ LVS ）を使用し、クラウドコンピューティングの要件に応じて、いくつかのカスタマイズを行っています。
レイヤ 7 SLB は、ロードバランシングを実現するために Tengine を使用しています。 Tengine、Nginx に基づいて Web サーバープロジェクトは、多量トラフィックのウェブサイトに対応する機能を追加しています。
  SLBのアクセスログについて SLBのレイヤ7のアクセスログは提供しています。
アクセスログの取得は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/85974.htm
   SLBのスペック変更方法と業務影響について コンソールにて、SLBのスペック変更をオンラインで実施することができます。また、トラフィックが流れている状態でAPIよりSLBのスペックを変更することもできます。
ただし、スペックを変更している時に、SLBサービスが中断されることあります。スペックの変更が完了になると、SLBが自動的に再開します。
なお、SLBのスペック変更は「パフォーマンス専有型」から「パフォーマンス専有型」へのインスタンススペック変更、もしくは、「パフォーマンス共通型」から「パフォーマンス専有型」へのインスタンススペック変更となります。「パフォーマンス専有型」から「パフォーマンス共通型」へのスペック変更はできません。
 スペックの変更は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/85942.htm
   VServerグループとマスタースレーブグループの違いについて Vserverグループを利用した場合、ディレクトリ転送機能を利用できます。
転送設定されてないディレクトリの場合、デフォルトバックエンドサーバーに分散されます。
デフォルトグループまたは、Vserverグループにて重みを0に設定してもマスタースレーブ構成になりませんので、マスタースレーブグループを利用する必要があります。
VServerグループは下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/85964.htm
マスタースレーブグループは下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/85965.htm
   サードパーティ証明書のアップロード方法について SLBにサードパーティ証明書をアップロードすることができます。
アップロード方法は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/85971.htm
   SLB関連の各API のスロットリング上限について SLBでは、AccessKey１つあたりのAPI呼び出し回数を１日に5000回まで制限されます。
Server Load Balancer プロダクトの制限は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/32459.htm</description>
    </item>
    
    <item>
      <title>サンプルプロジェクトの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/03/sample-project/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/03/sample-project/</guid>
      <description>&amp;nbsp; ここまででTerraform のインストール方法を学びました。それではサンプルプロジェクトを作成します。簡単なWebサーバを立ち上げながら、Terraformの流れや中身を確認します。 1. ディレクトリ・ファイル構成 &amp;nbsp; Terraformのファイルの拡張子は *.tf です。実行時、同じディレクトリの *.tf ファイルがマージされますので、基本は以下3ファイルに分けてそれぞれの用途・目的に応じた記載・運用がベターです。
main.tf … モジュールが内包するリソース、データソースなどの定義 outputs.tf … モジュールが出力するAttributeの定義 variables.tf … モジュールが受け取る変数の定義  main.tf には どのプロパイダを使うかを記載します。 階層化は任意ですが、.tfから別のフォルダの.tfに記載されてる変数を取り出すためにルートディレクトリを指定することがありますのでそこは注意が必要です。apply (=実行) にて分離実行することも可能です。 例えば以下のようにプロダクトサービス毎にフォルダを作成し、それぞれのリソースを作成しても、最終的には一つへまとめれます。
├── main.tf ├── output.tf ├── variables.tf │ ├── region │├── VPC ││├── main.tf ││├── output.tf ││└── variables.tf ││ │├── ECS ││├── main.tf ││├── output.tf ││└── variables.tf ・ ・ ・  &amp;nbsp; RAMなど他者へ渡したくない情報がある場合、別途設定ファイル（ confing.tfvars など）へ記載し、実行時は -var-file引数で 設定ファイルを読み取り実行することができます。
├── main.tf ├── output.tf ├── variables.</description>
    </item>
    
    <item>
      <title>料金体系</title>
      <link>https://sbcloud.github.io/help/best-practice/pricing/</link>
      <pubDate>Wed, 05 Jun 2019 12:30:18 +0800</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/pricing/</guid>
      <description> 既存のMDで上書きいただく　 </description>
    </item>
    
    <item>
      <title>RDS</title>
      <link>https://sbcloud.github.io/help/faq/rds/</link>
      <pubDate>Mon, 15 Jul 2019 15:32:14 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/rds/</guid>
      <description>一般仕様 RDSのトラフィック料金について RDS現在トラフィック（インバウンド、アウトバウンド含む）料金は無料です。
  sysadminの権限提供について インスタンスの安定性とセキュリティを保証するために、RDS for SQL Server では、sysadmin 権限を提供しておりません。
RDSの制限詳細は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/26141.htm
   カスタマイズ可能なパラメーターについて RDSはマネジメントサービスのため、カスタマイズ可能なパラメーターはRDSコンソールのパラメーターの設定ページに表示されているパラメーターのみとなります。
  RDSのストレージ容量の拡張方法について RDSのストレージ容量は下記メニューから拡張することができます。
コンソール &amp;gt; RDS &amp;gt; インスタンスの「詳細」&amp;gt; 設定を変更する &amp;gt; 容量
   ホワイトリストの設定方法について RDSにはホワイトリストを利用してアクセスIPを制限することができます。
RDSのホワイトリストの設定は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/43186.html
   インターネットアドレスとイントラネットアドレスの違いについて RDSにインターネットアドレスとイントラネットアドレスがあります。
イントラネットアドレスは同じVPC内のインスタンスのみアクセスすることができます。
インターネットアドレスはインターネットからアクセスすることができます。
  VPCとVswitchの変更方法について RDS作成後のVPCとVSwitchの変更を対応していません。既存RDSのバックアップからVPCとVSwitchを指定して新規RDSを作成することになります。
  バックアップ バックアップ取得時の性能影響について RDSのバックアップはスレーブインスタンスから取得するため、取得時にスレーブインスタンスへ影響がありますが、マスターインスタンスの性能に影響がありません。
  RDSバックアップの保存先について RDSバックアップはアーキテクチャ上にOSS上に保存されますが、お客様のOSS領域ではありませんので、ダウンロードする際には、RDSコンソールからとなります。
  リカバリ時に指定可能な時刻について バックアップからリカバリ時に希望時刻を指定することができます。
指定可能の時刻は最初のフルバックアップ時刻から現時刻の間となります。
  RDSリリース後のバックアップ提供について RDSのリリースに伴い、バックアップもリリースされます。RDSのバックアップをお客様のOSSに移管する機能は現在ありません。必要な場合、リリース前にRDSコンソールからダウンロードする必要があります。
  マルチゾーン マルチゾーンの確認方法について 下記メニューからマスターインスタンスとスレーブインスタンスの所在ゾーンを確認することができます。</description>
    </item>
    
    <item>
      <title>サンプルプロジェクトの実行</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/04/run-terraform/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/04/run-terraform/</guid>
      <description>&amp;nbsp; 前章は 簡単なWebサーバを立ち上げるというサンプルプロジェクトを作成しました。今章はサンプルプロジェクトを実行しつつ、Terraformの流れや中身を確認します。
Terraformの実行は非常にシンプルです。以下図のようにterraform initから始まり、terraform play、terraform applyでリソース作成を実行します。

1. terraform init &amp;nbsp; コードを書いたら「terraform init」コマンドを実行します。このコマンドはTerraformの実行に必要なプロパイダーのバイナリをダウンロードしてくれます。「Terraform has been successfully initialized!」と表示されていれば作業ディレクトリ構成的にOKです。
$ terraform init Initializing provider plugins... ・・・ Terraform has been successfully initialized!  
2. terraform plan 次は「terraform plan」コマンドです。 RAMなどの情報を別途設定ファイル confing.tfvars へ記載した場合は以下のコマンドで実行します。
$ terraform plan -var-file=&amp;quot;confing.tfvars&amp;quot; Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage.</description>
    </item>
    
    <item>
      <title>料金</title>
      <link>https://sbcloud.github.io/help/faq/price/</link>
      <pubDate>Mon, 15 Jul 2019 15:31:09 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/price/</guid>
      <description>料金 マイクロチャージの仕様について クレジットカードをご登録またはご追加の際に、マイクロチャージというクレジットカードの有効性を確認するプロセスにより、少額の課金（通常は100円以内）が発生します。
該当課金は、AlibabaCloudから24時間以内にカードに払い戻ししますが、カード発行会社により、ご利用のカードに対する払い戻しをご確認いただけるまでに 30 日程度を要する場合があります。
実際にAlibabaCloudが領収してないため、請求書の発行はできかねます。
また、カード会社の請求締切日により、カード会社からお客様に請求してから翌月に返金する可能性もあります。詳細はカード会社にお問合せください。
   コンソールに表示される月の使用金額と実際請求額の差分について コンソールに表示される月の使用金額と実際の請求額に差分が発生する場合があります。これは、従量課金インスタンス料金の合計方法によるものです。
従量課金インスタンスに発生した料金は、1時間1レコードとして小数点以下4桁まで記録されます。
コンソールに表示される月の使用金額に、上記全レコードの合計値が表示されます。
一方、実際請求額の計算では、先に製品ごとに発生した料金（製品ごとの全レコード）を合計し、小数点以下を切り捨てた後、再度合計するため、コンソールに表示される月の使用金額より低い場合があります。
   月の従量課金が10円未満場合の課金方法について 先月利用した従量課金が10円未満の場合、今月月初での課金を保留し、来月に持ち越します。
今月利用した従量課金分と合計し、10円を超えた場合、来月月初に課金されます。
今月分と合計しても10円を超えない場合、また保留し、更に再来月に持ち越します。
   サブスクリプション及び従量課金の請求時期について ■クレジットカード払いの場合
サブスクリプション課金分はご購入都度に請求されます。
従量課金分は月初1日に先月分が請求されます。
ただし、月内に従量課金分が累計して1万円を超えた場合、来月1日を待たずに超えた都度に請求されます。
■請求書払いの場合
先月中にご利用のサブスクリプション/従量課金分を合計して、翌月の第6営業日に請求書が発行されます。
  サブスクリプション及び従量課金の請求失敗後の動作について サブスクリプションのインスタンス更新時における課金失敗により、該当インスタンスがライフサイクルに入ります。ライフサイクルの15日目にインスタンスが停止され、30日目にリリースされます。リリースされるまで随時手動更新することができます。
なお、サブスクリプション更新時の課金失敗によって、別インスタンスの稼働に影響を与えることはありません。
従量課金の課金失敗により、アカウントの全従量課金インスタンスがライフサイクルに入ることになります。ライフサイクルの15日目にインスタンスが停止され、30日目にリリースされます。リリースまで未払いを精算することにより、アカウントを通常に戻すことができます。
なお、サブスクリプションインスタンスは従量課金（アウトバウンドトラフィック料金）の課金失敗によりリリースされることがありませんが、15日目からネットワーク利用不可となります。
   利用明細のダウンロード可能時期と見方について 日本サイト現在、アカウントによりますが、利用明細を2パターンで提供しています。
パターン1
サブスクリプションと従量課金明細を纏めて提供する方法となります。毎月6日以降に先月分をコンソールからダウンロードできます。
パターン2
サブスクリプションと従量課金明細を分けて提供する方法となります。サブスクリプション分はお支払い完了後にダウンロードできます。従量課金分は月初1日（または月の利用額は1万円を超える時点）の支払い完了後にダウンロードできます。
  請求書払いの申請方法と基準について 以下の条件を満たしている法人様のみ、請求書払いをご利用可能です。
■請求書払いのご利用条件
・法人のお客様であること
・当社との協業を予定されていること
・資本金が300万円以上であること
・50,000円/月以上のご利用が予定されていること
・半年以上継続的なご利用が予定されていること
・請求代行サービスの取引審査を通過すること
希望される場合、該当旨をチケットでサポートセンターに連絡する必要があります。
チケットで依頼があった場合はサポートから営業へトスアップします。営業担当がついているユーザーは、チケットへの連絡は必要なく、営業担当にて手続きを進めてください。
   請求書払いの締切日と発行日について 請求書払いは利用月当月中にご利用したサブスクリプション分と従量課金分を纏めて計算し、翌月に請求する方式となります。請求書払いの締め日は当月末日となり、請求書は翌月の第6営業日に発行されます。
  インスタンス自動更新失敗後の動作について 自動更新設定されたサブスクリプションインスタンスは、以下のスケジュールで3回に渡って課金する仕様となります。</description>
    </item>
    
    <item>
      <title>Terraform文法について</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/05/program-syntax/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/05/program-syntax/</guid>
      <description>&amp;nbsp; 前章は 簡単なWebサーバを立ち上げるというサンプルプロジェクトを実行しました。うち、Terraformには様々な記載文法がありますので、把握した方がいい部分だけ説明します。

1. Configuration Syntax &amp;nbsp; Terraformのコード構成要素、コードの構成文の書き方です。Terraformの利用ガイドラインに沿って記載してみてください。Terraformのバージョンによっては書き方が異なる場合がありますので、注意が必要です。
# project_nameを宣言 variable &amp;quot;project_name&amp;quot; { } /* alicloud_vpcを設定 変数project_nameを呼び出す */ resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;vpc&amp;quot; { name = &amp;quot;${var.project_name}-vpc&amp;quot; cidr_block = &amp;quot;192.168.1.0/24&amp;quot; }   単一行コメントは#をつけます。 複数行コメントは/*と*/で囲みます。 文字列は二重引用符で囲みます。 文字列は${}を使って他の構文や値を補間できます。 ${var.foo}。 数字は10進数で扱います。数字の前に英数字を付けると、例えば0xでも16進数として扱われます。 ブール値が使え、true、falseのどれかになります。 プリミティブ型のリストは角括弧（[]）で作成できます。例：[&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;] マップは中括弧（{}）とコロン（:） で作成できます。例：{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;bar&amp;quot;: &amp;quot;baz&amp;quot; } キーが数字で始まっていない限り、キーでは引用符を省略できます。その場合は、引用符が必要です。単一行マップでは、キーと値のペアの間にコンマが必要です。複数行マップではキーと値のペアの間の改行で十分です。  他、構成文の書き方もありますが、ひとまずは上記のを抑えれば大抵問題ないです。

2. Interpolation Syntax &amp;nbsp; 変数・関数・属性など、コード補充機能です。
 ユーザ文字列変数 var.接頭辞とそれに続く変数名を使用します。たとえば${var.foo} で foo変数値を補間します。
 ユーザーマップ変数 構文はvar.MAP[&amp;quot;KEY&amp;quot;]です。たとえば${var.amis[&amp;quot;us-east-1&amp;quot;]} でマップ変数us-east-1、内キーの値amisを取得します。
 ユーザリスト変数 構文は${var.</description>
    </item>
    
    <item>
      <title>Dockerについて</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/06/docker/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/06/docker/</guid>
      <description>&amp;nbsp; 前章までは Terraformのインストール方法、Terraformの文法、実行方法を説明しました。しかしこれらはTerraform v0.11.13前提での話なので、Terraformのバージョンが違うことで挙動が異なってしまうこともあります。Terraformでよく使うメソッドが急に廃止、、というのもよくあります。それを防ぐためにdockerを使ったインストール、利用する方法があります。dockerはパッケージングを行うための技術です。
*注：Terraformのバージョン食い違いは基本的にtfenvでカバーできます。詳しくはインストールを参照してください

1. dockerについて &amp;nbsp; dockerはOS・ミドルウェア・ファイルシステム全体をイメージという単位で取り扱い、まるごとやりとり出来るツールです。また、イメージの配布やバージョン管理も可能です。メリットとして、手軽に同じ環境を何人のユーザ・ユーザ・他のマシンでも手に入れることができ、即座に同環境を再現（ CI (Continuous Integration) 継続的インテグレーションと CD (Continuous Delivery) 継続的デリバリー ）することができます。 また、dockerはTerraformで大きく３つの役割があり、Terraformのインストールや実行環境の再現、各種リソースの接続設定、docker Imageを使った既存のプロダクトリソースをそのまま導入することが可能です。（docker Imageとは、dockerコンテナを作成する際に必要となるファイルシステムです。）

2. dockerのTerraform位置について &amp;nbsp; Terraformによるdockerの利用は大きく2パターンあります。
 1.Terraformのバージョン違いなど環境差分を抑えつつ実行する場合 2.Terraformで新規作成した各種リソースの接続設定をする場合 3.docker-imageを使った、CI/CD:継続的インテグレーションと継続的デリバリーをする場合  ざっくりですがこんなイメージです。 &amp;nbsp; 1はバージョン固定や実行環境を汚さずに使用するメリットがあります。様々な環境でterraformを使用したい場合は直接terraformコマンドをインストールせず、バージョン管理が可能なツール(tfenv)を使用してインストールすルことを勧めます。 &amp;nbsp; 2はTerraformで新規作成したリソースに対し、docker-compose.yml ファイルを使ってアプリケーションの環境を設定します。こちらは公式サイトにて説明がありますので参考にしてください。 http://docs.docker.jp/compose/overview.html
&amp;nbsp; 3は、dockerのImageファイルをdocker hub（リポジトリ）へ保存することで、新規ECSや各種アプリケーション、Webサイトを立ち上げる時、docker hub（リポジトリ）から対象のDocker ImageファイルをPullしそのまま実行することで、どの環境でも継続CI/CDを実現することができます。
本章はTerraformをメインとしてるため、ここにCI/CDや方法は載せませんが、やり方は以下サイトを参照してみてください。（近日中にCI/CD手法を載せる予定です）
Dockerize App and Push to Container Registry: CI/CD Automation on Container Service (1)
Continuous Deployment Automation on Alibaba Cloud: CI/CD Automation on Container Service (2)</description>
    </item>
    
    <item>
      <title>Moduleについて</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/07/module/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/07/module/</guid>
      <description>&amp;nbsp; これまでTerraformの書き方を学びました。しかし問題があります。それはvariableによる変数宣言が多すぎると、可読性も下がり、場合によっては何度も同じ内容を書く必要があったりします。それを防ぐために、他のプログラミング言語と同じくモジュール化があります。

1. Moduleとは &amp;nbsp; Terraformにおけるmoduleは各resourceを抽象化するためのものです。以下の例を見てみましょう。モジュール化されてないソースと、モジュール化されてないソースを見てください。
モジュール化されてないソース variable &amp;quot;region&amp;quot; { default = &amp;quot;ap-northeast-1&amp;quot; } variable &amp;quot;solution_name&amp;quot; { default = &amp;quot;Web-Application-for-Terraform&amp;quot; } variable &amp;quot;web_layer_name&amp;quot; { default = &amp;quot;Web&amp;quot; } variable &amp;quot;web_availability_zone&amp;quot; { default = &amp;quot;a&amp;quot; } resource &amp;quot;alicloud_instance&amp;quot; &amp;quot;web&amp;quot; { instance_name = &amp;quot;${var.web_layer_name}&amp;quot; availability_zone = &amp;quot;${var.region}${var.web_availability_zone}&amp;quot; ・・・ ・・・ }  resourceの中に変数のプレースホルダを置き、さらにその変数名を variableで変数宣言し呼び出ししてしまいます。それを抑えるのがmoduleです。
モジュール化されてるソース variable &amp;quot;region&amp;quot; { value = &amp;quot;ap-northeast-1&amp;quot; } variable &amp;quot;solution_name&amp;quot; { value = &amp;quot;Web-Application-for-Terraform&amp;quot; } variable &amp;quot;web_layer_name&amp;quot; { value = &amp;quot;Web&amp;quot; } variable &amp;quot;web_availability_zone&amp;quot; { value = &amp;quot;a&amp;quot; } module { source = &amp;quot;.</description>
    </item>
    
    <item>
      <title>VPCの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/08/vpc/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/08/vpc/</guid>
      <description>&amp;nbsp; ここまではTerraformのインストール方法、コード記載方法、実行方法を説明しました。
ここからはユーザ各自でコード作成、応用ができるよう、AlibabaCloudの基本プロダクトサービスの説明を通じて解説します。
1. VPC &amp;nbsp; VPCは、Alibaba Cloudに設置されたプライベートネットワークです。 VPCはAlibaba Cloudの他のアカウントを含む仮想ネットワークと論理的に分離されています。
&amp;nbsp; VPCはAlibaba Cloud でお客様専用のプライベートネットワークです。 CIDRというIPアドレス範囲の指定で経路、ルートテーブルとネットワークゲートウェイの設定など、VPCを完全に制御できます。VPC環境があることで、ECS、RDS、SLBなど外部インターネットからアクセスしないAlibaba Cloudリソースを使用することができます。
&amp;nbsp; システムをセキュアにするため、パブリックネットワークには必要最小限のリソースのみ配置し、それ以外はプライベートネットワークに置くのがベストプラクティスです。

2. コンポーネント &amp;nbsp; VPCは、CIDRブロック、VRouter、及びVSwitchで構成されます。
・CIDRブロック・・・IPアドレスの空間を指定することで通信経路を出す設定情報。プライベートIPアドレス範囲をCIDR（Classless Inter-Domain Routing）ブロックの形式で指定する必要があります。 ・VRouter・・・VPCのハブ。VPC内の各VSwitchを接続でき、ゲートウェイとしてもVPCを他のネットワークに接続することもできます。 ・VSwitch・・・VPCの基本的なネットワークデバイス、様々なクラウド製品インスタンスに接続するために使用されます。
VPCコンポーネントは以下のような構成図になります。 
また、VPC作成には以下の通り制限事項がありますので、注意が必要です。
   リソース デフォルトの制限 クォータ量の増減     各リージョンでの最大VPC数 10    使用可能なCIDRブロックの範囲 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8,及びそのサブセット サポートセンターまでお問い合わせください   VPC 内の VRouter の最大数 1 申請不可   VPC 内の VSwitch の最大数 24 サポートセンターまでお問い合わせください   VPC 内のルータテーブルの最大数 1 申請不可   ルータテーブル内のルートエントリの最大数 48 サポートセンターまでお問い合わせください   VPCで実行できるクラウド製品インスタンスの最大数 15,000 申請不可    参考:VPC使用制限</description>
    </item>
    
    <item>
      <title>ECS、EIPの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/09/ecs/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/09/ecs/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるECS、EIPの作成方法を解説します。
1. ECS &amp;nbsp; ECSは、Alibaba Cloudによる仮装コンピューティングサービスです。ECS インスタンスは、ECS のコアコンポーネントであり、CPU、メモリ、およびその他の基本的なコンピューティングコンポーネントを含む仮想コンピューティング環境です。ディスク、イメージ、スナップショットなどの他のリソースは、ECS インスタンスと組み合わせてのみ使用できます。 &amp;nbsp; Alibaba CloudのECSはビジネスやWebアプリケーションなど様々なニーズに対応しており、即時に作れることが特徴です。
&amp;nbsp; ECSインスタンス生成リソースは多くのオプション（任意）でパラメータや構成を指定できます。ECSインスタンスはVPCやセキュリティグループとは少し異なり、OSやバージョン選定、起動時データ引き渡しやECS使い捨て利用など様々な利用方法が実現出来るため、ここは抑えておきましょう。

2. ECSインスタンス生成のTerraformについて &amp;nbsp; 本題、ECSインスタンス生成作成に移ります。ECSインスタンス生成するだけの簡単なソースを作ってみます。
resource &amp;quot;alicloud_instance&amp;quot; &amp;quot;ECS_instance&amp;quot; { instance_name = &amp;quot;ECS_instance_for_terraform&amp;quot; host_name = &amp;quot;ECS_instance_for_terraform&amp;quot; instance_type = &amp;quot;ecs.n4.small&amp;quot; image_id = &amp;quot;centos_7_06_64_20G_alibase_20190218.vhd&amp;quot; system_disk_category = &amp;quot;cloud_efficiency&amp;quot; security_groups = [&amp;quot;${alicloud_security_group.sg.id}&amp;quot;] availability_zone = &amp;quot;${var.zone}&amp;quot; vswitch_id = &amp;quot;${alicloud_vswitch.vsw.id}&amp;quot; }  alicloud_instance  instance_name - （オプション）ECSインスタンスの名前。このパラメータを指定しない場合、デフォルト名のECS-Instanceを自動生成します。 host_name - （オプション）ECSのホスト名。 instance_type - （必須）起動するインスタンスの種類。 image_id - （必須）ECSインスタンスに使用するイメージ。ECSインスタンスのイメージは image_idを変更することで置き換えることができます。  image_idの種類や取得方法は後述します。
 system_disk_category - （オプション）ストレージの種類。有効な値はcloud_efficiency 、 cloud_ssd 、およびcloudです。デフォルトはcloud_efficiency。 security_groups - （必須）関連付けるセキュリティグループIDのリスト。 availability_zone - （オプション）インスタンスを起動するゾーン。 vswitch_id - （オプション）接続したいVSwitchのID。 user_data - （オプション）ユーザーデータ。起動直後、実行したいコマンドがあればこちらにて入れます。  このalicloud_instanceリソースを実行することにより、以下の属性情報が出力されます。</description>
    </item>
    
    <item>
      <title>アカウント</title>
      <link>https://sbcloud.github.io/help/faq/account/</link>
      <pubDate>Sat, 13 Jul 2019 15:31:09 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/faq/account/</guid>
      <description>アカウント TOTP認証利用できなくなった時の対応方法について バインドしている携帯電話を紛失したり、TOTP認証アプリケーションを削除する等、何らかの理由で認証が行えなくなった場合、バインド解除を申請することができます。
申請方法は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/faq-detail/54827.html
   メールアドレスの変更方法について ログインに使用するメールアドレス（ログインアカウント）は変更することができます。
変更方法は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/52915.html
   クレジットカードの変更方法について アカウントには最低1枚のクレジットカードを登録する必要があります。
このため、クレジットカードの変更は、以下の手順で操作します。
①新しいカードを追加
②既存カードを削除
変更方法は下記のドキュメントをご参照ください。
https://jp.alibabacloud.com/help/doc-detail/50107.html
   アカウント登録氏名（社名）の変更方法について アカウントにクレジットカードを追加・有効化完了後は、コンソールから登録名（個人：姓名、法人：会社名）を変更することができません。
変更が必要な場合、チケット起票してサポートセンターに連絡する必要があります。
なお、法人アカウントの「担当者名（連絡先情報の姓名）」はコンソールにログイン後、下記リンクにて変更できます。（チケットを起票する必要はありません。） https://myaccount.aliyun.com/account/complete-profile#/content
   コンソール自動ログアウトの仕様について 操作の有無に関係なく、コンソールにログインしてから3時間経過すると、タイムアウトでセッションが切れ、自動的にログアウトされます。
  サポートセンターの対応範囲について サポートセンターの対応範囲は下記となります。
■サービスに関する問い合わせ
・プロダクトの概要/価格
・ご購入内容/ご利用料金
・お支払い方法/請求全般
・アカウント関連
■プロダクトに関する問い合わせ
・使い方/操作方法の説明
・トラブルシュート
・障害対応
※コンソール/API/SDKを含む
下記内容は範囲外となります。
・お客様が導入されたアプリケーションソフトウェアのトラブルシュート
・OSのパッチ適用
・データベースチューニング
サポートセンターの詳細は下記をご参照ください。
https://jp.alibabacloud.com/support/after-sales
 チケット起票の推奨記載内容について
下記内容に近いコンテンツを提供することで、よりスムーズにサポートを受けることができます。
現象　概要
どのような現象が発生しているか。具体的に　例:
・エラーが発生した　(要 具体的なエラーメッセージ、実施した手順)、
・通信できない、応答しない、つながらない、反応しない、動かない、アクセスできない
(要　どこからどこに、コマンドと結果、関連インスタンスのパラメータ)
・意図したものが表示されない、意図しないものが表示される</description>
    </item>
    
    <item>
      <title>SLBの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/10/slb/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/10/slb/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるSLBの作成方法を解説します。
1. SLB &amp;nbsp; SLB（Server Load Balancer）はアプリケーションや Web サイトのトラフィックを分散させるサービスです。
&amp;nbsp; SLB は、仮想サービスアドレスを設定することによって、追加の ECS インスタンスを高性能で可用性の高いアプリケーションサービスプールに仮想化し、クライアントからのリクエストを、 転送ルールに従ってサーバープール内のECS インスタンスに分配します。
&amp;nbsp; また、SLB は、追加されたバックエンドサーバーの状態をチェックし、異常状態の ECS インスタンスを自動的に分離します。そうすることで SPOF (単一障害点) 問題を除去し、アプリケ ーションの全体的なサービス性能を向上させます。 それに加え、Alibaba Anti-DDoS と組み合わせることで、SLB は DDoS 攻撃を防御することができます。

2. コンポーネント &amp;nbsp; SLBは以下のコンポーネントが含まれています。
 SLB インスタンス SLB インスタンスは、実行中の負荷分散サービスで、着信トラフィックをバックエンドサーバーに分配します。 負荷分散サービスを使用するには、SLB インスタンスを作成します。インスタンスには少なくとも 1 つのリスナーと 2 つのバックエンドサーバーを設定する必要があります。
 リスナー リスナーはクライアントからのリクエストをチェックし、設定されたルールに基づいてバックエンドサーバーに転送します。 また、バックエンドサーバーのヘルスチェックも実行します。
 バックエンドサーバー バックエンドサーバーは、分散リクエストを処理するために SLB インスタンスに追加された ECS インスタンスです。 分散リクエストを処理する ECSインスタンスは、デフォルトサーバーグループ、VServer グループ、アクティブ/スタンバイサーバーグループのいずれかに追加することができます。
  またServer Load Balancer (SLB) は、 ECS インスタンスの単一障害点 (SPOF)、アクティブゾーンの障害、などを防ぐ役割がありますので、SLBを組み合わせることでサービスの高可用性を実現することができます。</description>
    </item>
    
    <item>
      <title>AutoScalingの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/11/autoscaling/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/11/autoscaling/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるAutoscalingの作成方法を解説します。
1. AutoScaling &amp;nbsp; Auto Scaling はECSリソースの容量を自動的にスケールイン/スケールアウト調整してくれます。 ※ESSとは、SDK名やパッケージ名で用いられるAuto Scalingの略称です。（Elastic Scaling Service）

2. コンポーネント &amp;nbsp; VPCは、CIDRブロック、VRouter、及びVSwitchで構成されます。
・スケールアウト ECSリソースが増加した際、自動的にECSインスタンスが作成されるので、アクセス遅延や過度のリソース負荷を回避できます。 ・スケールイン ビジネスニーズに伴い、基盤となるECAリソースが低下した場合、自動的にECSインスタンスが削除され、リソースの無駄を省いてくれます。 ・柔軟なリカバリ 異常なECSインスタンスを検知し、自動的にリリースされ、代わりに新規ECSインスタンスが作成されます。 3. AutoScalingのTerraformについて &amp;nbsp; 本題、AutoScaling作成に移ります。以下の構成図通り、簡単なソースを作ってみます。
resource &amp;quot;alicloud_ess_scaling_group&amp;quot; &amp;quot;scaling&amp;quot; { min_size = 2 max_size = 10 scaling_group_name = &amp;quot;tf-scaling&amp;quot; vswitch_ids=[&amp;quot;${alicloud_vswitch.vsw. *.id}&amp;quot;] loadbalancer_ids = [&amp;quot;${alicloud_slb.slb. *.id}&amp;quot;] removal_policies = [&amp;quot;OldestInstance&amp;quot;, &amp;quot;NewestInstance&amp;quot;] depends_on = [&amp;quot;alicloud_slb_listener.http&amp;quot;] } resource &amp;quot;alicloud_ess_scaling_configuration&amp;quot; &amp;quot;config&amp;quot; { scaling_group_id = &amp;quot;${alicloud_ess_scaling_group.scaling.id}&amp;quot; image_id = &amp;quot;ubuntu_140405_64_40G_cloudinit_20161115.vhd&amp;quot; instance_type = &amp;quot;ecs.n2.small&amp;quot; security_group_id = &amp;quot;${alicloud_security_group.default.id}&amp;quot; active=true enable=true user_data = &amp;quot;#!</description>
    </item>
    
    <item>
      <title>OSSの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/12/oss/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/12/oss/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるObject Storage Serviceの作成方法を解説します。
1. OSS &amp;nbsp; Object Storage Service （OSS）は、クラウド内の任意の量のデータの保存、バックアップ、およびアーカイブを可能にするストレージサービスです。

2. コンポーネント &amp;nbsp; OSSはTerraform モジュールを使用して、バケットとオブジェクトを管理できます。 例として、
 バケット管理機能 バケットの作成 バケットの ACL を設定 バケットに CORS (Cross-Origin Resource Sharing) を設定 バケットのログ記録を設定 バケットの静的 Web サイトホスティングを設定 バケットのリファラを設定 バケットのライフサイクルルールを設定 オブジェクト管理機能 オブジェクトをアップロード オブジェクトのサーバー側の暗号化を設定 オブジェクトに ACL を設定 オブジェクトメタを設定  などが上げられます。

3. OSSのTerraformについて &amp;nbsp; 本題、OSS作成に移ります。プライベートバケットを作成するという簡単なソースを作ってみます。
resource &amp;quot;alicloud_oss_bucket&amp;quot; &amp;quot;bucket-acl&amp;quot;{ bucket = &amp;quot;bucket-170309-acl&amp;quot; acl = &amp;quot;private&amp;quot; }  alicloud_oss_bucket  bucket - （オプション）バケットの名前。 acl - （任意）ACL。デフォルトは &amp;ldquo;private&amp;rdquo;。  他、OSSに関してはalicloud_oss_bucketだけで色々なリソース作成が可能です。例えば以下の例があります。</description>
    </item>
    
    <item>
      <title>RDSの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/13/rds/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/13/rds/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるRelation Database Serviceの作成方法を解説します。
1. RDS &amp;nbsp; Relation Database Service （RDS）は、ApsaraDB for RDS 、クラウド内の独立したデータベースサービスです。
2. コンポーネント &amp;nbsp; ApsaraDB for RDSシリーズとしてMySQL、SQL Server、PostgreSQL、PPASがあります。
・ApsaraDB for MySQL・・・MySQL。現状5.5、5.6、5.7をサポートしています。
・ApsaraDB for SQL Server・・・SQL Server。2008 R2 EE、2012 のWeb/Standard/EE、2016 のWeb/Standard/EEをサポートしています。
・ApsaraDB for PostgreSQL・・・PostgreSQL。9.4をサポートしています。
・ApsaraDB for PPAS・・・Postgres Plus Advanced Server （ PPAS ）、Oracle Database互換性機能があります。現在バージョン 9.3 をサポートしています。
3. RDSのTerraformについて &amp;nbsp; 本題、RDS作成に移ります。ApsaraDB for MySQLというインスタンスを作成し、databaseをセット、アカウントを作成する内容です。
resource &amp;quot;alicloud_db_instance&amp;quot; &amp;quot;default&amp;quot; { engine = &amp;quot;MySQL&amp;quot; engine_version = &amp;quot;5.6&amp;quot; instance_type = &amp;quot;rds.mysql.t1.small&amp;quot; instance_storage = 5 vswitch_id = &amp;quot;${var.</description>
    </item>
    
    <item>
      <title>RAMの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/14/ram/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/14/ram/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるResource Access Managementの作成方法を解説します。
1. RAM権限管理 &amp;nbsp; AlibabaCloudはどのサービスを利用・操作するにしろ権限が必要です。 Terraformで作成したリソースサービスにも他ユーザが操作できるように権限アタッチが必要になります。 &amp;nbsp; 本章では、AlibabaCloudサービスに対する権限付与の方法を学びます。

2. Alibaba CloudのRAMについて &amp;nbsp; RAM（Resource Access Management）はユーザーID の管理とアクセス制御、権限管理のためのサービスです。RAMを使用することで、ユーザーアカウント (従業員、システム、アプリケーションなど) を作成および管理し、Alibaba Cloud アカウントのリソースに対してそのユーザーアカウントが所有する操作権限を制御できます。Terraformによるリソースを実行するときはRAMで実行権限が必須です。

3. RAMロールとRAMユーザーの違い  RAMロールは仮想ID であり、固定のIDは持っていますが、ID認証情報アクセスキーを持ちません。 RAMユーザは、固定のIDとID認証アクセスキーを持つ実際のIDであり、一般的には、特定のユーザーまたはアプリケーションに対応します。  graph LR; A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;B(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;#34;) A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;C(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;#34;) B(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ロールにアタッチ&amp;#34;)-.-&amp;gt;D(&amp;#34;ロール(役割)&amp;#34;) C(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;ユーザにアタッチ&amp;#34;)-.-&amp;gt;E(&amp;#34;ユーザ(人)&amp;#34;) D(&amp;#34;ロール(役割)&amp;#34;)-.-&amp;gt;F(&amp;#34;ロール(役割)を&amp;lt;br&amp;gt;エンティティ(ECSインスタンスなど）にアタッチ&amp;#34;) A(&amp;#34;ポリシーサービスに&amp;lt;br&amp;gt;対する権限&amp;#34;)-.-&amp;gt;G(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;#34;) G(&amp;#34;RAMポリシーを&amp;lt;br&amp;gt;グループにアタッチ&amp;#34;)-.-&amp;gt;H(&amp;#34;グループ（ユーザの集まり）&amp;#34;) &amp;nbsp; RAMロールは権限が付与された実際のユーザーが引き受ける必要があります。ロールを引き受けると実際のユーザーはこのRAMロールの一時セキュリティトークンを受け取ります。これにより、この一時セキュリティトークンを使用して、ロールに許可されているリソースにアクセスできます。
&amp;nbsp; 普段の利用時はRAMユーザで管理・運用していくのがベストプラクティスですが、Terraform利用時は基本的にAdministratorAccessが必要となります。
4. ポリシー &amp;nbsp; 権限はポリシーで定義します。ポリシーでは「実行可能なアクション」や「操作可能なリソース」を指定でき、柔軟に権限が設定できます。
5. ポリシードキュメント &amp;nbsp; ポリシードキュメントはJSON形式で管理しており、以下のようにまとめます。 ▼JSON 形式のポリシードキュメント
{ &amp;quot;Statement&amp;quot;: [ { &amp;quot;Action&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot; } ], &amp;quot;Version&amp;quot;: &amp;quot;1&amp;quot; }  ポリシードキュメントでは、次のような要素を記述します。 * Effect - 許可する場合はAllow、許可しない場合はDeny * Resource - AlibabaCloudの操作可能なリソース・許可されたオブジェクトはなにかを指定します。たとえば ”ユーザAがリソースSampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、ResourceはSampleBucket です。 * Action - AlibabaCloudの各種サービスでどんな操作が実行できるか。サービスを個別指定することも可能。たとえば ”ユーザAがリソースSampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、ActionはGetBucket です。 * Condition - 権限付与が有効になる条件です。たとえば、”ユーザAが2018年12月31日より前にリソース SampleBucketに対してGetBucket操作を実行できる” という権限付与ポリシーの場合、Conditionは 2018年12月31日より前 です。</description>
    </item>
    
    <item>
      <title>Kubernetesの作成</title>
      <link>https://sbcloud.github.io/help/best-practice/devops/terraform/15/kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/best-practice/devops/terraform/15/kubernetes/</guid>
      <description>AlibabaCloudの基本プロダクトサービスであるResource Access Managementの作成方法を解説します。
1. Kubernetes &amp;nbsp; Kubernetesは自動デプロイ、スケーリング、アプリ・コンテナの運用自動化のために設計されたオープンソースのプラットフォームです。Kubernetesによって、以下のことが要求に迅速かつ効率良く対応ができます。
 アプリを迅速に予定通りにデプロイする (コンテナをサーバー群へ展開する) 稼働中にアプリをスケールする（稼働中にコンテナ数を変更する） 新機能をシームレスに提供開始する (稼働中にロールアウトする) ハードウェアの利用率を要求に制限する (コンテナで共存させて稼働率を高くする）  &amp;nbsp; Kubernetesのゴールは、下記の様なアプリの運用負担を軽減するためのエコシステムのコンポーネントとツールを整備することです。
 可搬性: パブリック・クラウド、プライベート・クラウド、ハイブリッド・クラウド、マルチ・クラウド 拡張可能: モジュール化、追加可能、接続可能、構成可能 自動修復: 自動配置、自動再起動、自動複製、自動スケーリング  &amp;nbsp; 2014年にプロジェクトが開始され、運用経験を基に、本番のワークロードを大規模に実行し、コミュニティのベストプラクティスのアイデアやプラクティスと組み合わせています。 Kubernetesの事例は https://kubernetes.io/case-studies/ にあります。
&amp;nbsp; またAlibabaのKubernetesサービスは非常に便利な上、Container Clustor、kubernetes managed、Container Registryと各方面へ進化段階なので、随時チェックするといいでしょう。

2. コンポーネント &amp;nbsp; Container Service for Kubernetes はネイティブの Kubernetes をベースに構成、拡張されています。 このサービスは、クラスターの作成および拡張を容易に行うことができ、Alibaba Cloud の機能である、仮想化、ストレージ、ネットワーク、セキュリティ、およびKubernetes コンテナー化したアプリケーションの高品質な実行環境を統合することができます。
3. KubernetesのTerraformについて &amp;nbsp; 本題、Kubernetesクラスタ作成に移ります。AZシングルゾーンのKubernetesクラスタを生成するだけの簡単なソースを作ってみます。
resource &amp;quot;alicloud_cs_kubernetes&amp;quot; &amp;quot;main&amp;quot; { name_prefix = &amp;quot;my-first-k8s&amp;quot; availability_zone = &amp;quot;${data.alicloud_zones.default.zones.0.id}&amp;quot; new_nat_gateway = true master_instance_types = [&amp;quot;ecs.</description>
    </item>
    
    <item>
      <title>SSH踏み台サーバの作成</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/bastion-server/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/bastion-server/</guid>
      <description>ssh踏み台サーバ &amp;nbsp; クラウド上にてEC2やOSS、RDSなどにて個人情報や外部流出したくないしたくない危険なファイルがある場合、インターネットら外部からメインサーバが見える状態は極力避けたいです。それを防ぐために様々な手段がありますが、費用対効果の高いネットワーク構造として踏み台サーバを作る方法があります。踏み台サーバーとは、インターネットに直接繋がないサーバーをSSHで接続するために経由される、セキュリティ層の役割を満たすことができるサーバーのことです。踏み台サーバを使うことで、以下のメリットがあります。
 実行用など本番に使う各サーバに直接アクセスできないため、外部からの侵入リスクを軽減できる。 PublicIPを実行用など本番に使う各サーバに割る必要がないため、運用における負荷を軽減できる。 踏み台サーバから実行用など本番に使う各サーバへのログを残せるため、不正操作を防げれる。  

構成としては以下の図通りになります。

&amp;nbsp; Terraformで踏み台サーバ、本番サーバを作ってみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、Bastion-Server-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.1.0/24 VPC の CIDR ブロック    vpc description 任意 Enable Bastion-Server vpc VPC の説明。   alicloud_vswitch vsw name 任意 ${var.project_name}-vswitch vswitch の名称。この例の場合、Bastion-Server-for-Terraform-vswitch として表示されます。    vsw vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>SLBの構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/slb-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/slb-setting-sample/</guid>
      <description>SLBの構築 &amp;nbsp; SLB（Server Load Balancer）は、外部インターネット、もしくは内部イントラネットからパブリックIPまたはプライベートIPへ届くインバウンドトラフィックを予め設定したSLBの転送ルールに従って、複数のECSインスタンス間のインバウンドトラフィックを分散および制御し、アプリケーションの可用性を高めるサービスです。SLBを使うことで、以下のメリットがあります。
 高可用性・・・完全冗長モードとして障害や災害時でもで稼働します。 スケーラブル・・・サービスニーズに合わせて必要な台数分へサーバを増減します。 費用対効果・・・必要なリソースの分だけ使用なので、通常の負荷分散ハードウェアと比べてコスト削減します。 セキュリティ・・・SLBはトラフィックを分散するだけでなくHTTP Flood攻撃やSYN Flood攻撃など、最大5GbitsのDDoS攻撃から防御できます。  SLBのより詳しい詳細はこちらを参照ください。
&amp;nbsp; TerraformでSLBを使ったECSインスタンスを作成してみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、SLB-Sample-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.1.0/24 VPC の CIDR ブロック    vpc description 任意 Enable SLB-Setteing-Sample vpc VPC の説明。   alicloud_vswitch vsw name 任意 ${var.project_name}-vswitch vswitch の名称。この例の場合、SLB-Sample-for-Terraform-vswitch として表示されます。    vsw vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>RDSの構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/rds-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/rds-setting-sample/</guid>
      <description>&amp;nbsp; TerraformでデータベースサービスであるRDSを作ってみます。ゴールの構成図は以下の通りです。
またECSからRDS for MySQLへ接続するためにdocker-composeを使います。docker-composeはコンテナオーケストレーションの一つで、環境構築を再現するのが楽になる手法です。docker-compose.ymlファイルは以下の通りです。
version: &#39;3&#39; services: # MySQL db: image: mysql:5.7 container_name: mysql_host environment: - MYSQL_HOST=&#39;rds-sample.mysql.japan.rds.aliyuncs.com&#39; - MYSQL_DATABASE=&#39;rds_setting_sample&#39; - MYSQL_USER=&#39;test_user&#39; - MYSQL_PASSWORD=&#39;!Password2019&#39; - TZ=&#39;Asia/Tokyo&#39; command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci volumes: - ./docker/db/data:/var/lib/mysql - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf - ./docker/db/sql:/docker-entrypoint-initdb.d ports: - 3306:3306  それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、RDS-Sample-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.</description>
    </item>
    
    <item>
      <title>Kubernetesの構築と設定</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/kubernetes-setting-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/kubernetes-setting-sample/</guid>
      <description>&amp;nbsp; 簡単なkuberntesクラスターを作ってみます。シングルゾーンによるクラスタでの作成になります。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、RDS-Sample-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.1.0/24 VPC の CIDR ブロック    vpc description 任意 Enable k8s-Setteing-Sample vpc VPC の説明。   alicloud_vswitch vsw name 任意 ${var.project_name}-vswitch vswitch の名称。この例の場合、RDS-Sample-for-Terraform-vswitch として表示されます。    vsw vpc_id 必須 ${alicloud_vpc.vpc.id} アタッチするVPCのID    vsw cidr_block 必須 192.</description>
    </item>
    
    <item>
      <title>Webアプリケーションの構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/web-application/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/web-application/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。IDCなどデータセンターにて、スケーラブルで世界規模で利用可能なWebアプリケーションを開発および展開するのは、多くの手作業から工数がかかり、またトラフィックに応じてリソースの効率さが悪くなってしまう課題があります。しかしAlibabaCloudで構築すると、それらの課題が払拭されます。それだけでなく、上に、投資収益率（ROI）も向上するメリットがあります。
 すぐに着手できる配置構成 必要な分だけリソースを提供（オンデマンドサーバープロビジョニング） 単一障害点（SPOF）なし 多重層のセキュリティ保護あり  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.0.0/16 VPC の CIDR ブロック    vpc description 任意 VPC for ${var.project_name} VPC の説明。この場合VPC for Accelerated-Content-Delivery-for-Terraform として表示されます。   alicloud_vswitch web name 任意 ${var.project_name}-web-vswitch vswitch の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-web-vswitch として表示されます。    web vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>高速コンテンツ配信の実現</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/accelerated-content-delivery/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/accelerated-content-delivery/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。従来のWebアプリケーションアーキテクチャでは、Webアプリケーションが大量のリクエストトラフィックを受け取ると、サーバーが過負荷になり、サイトが遅くなったりサーバーがクラッシュしたりする可能性があります。また地理的に異なる場所に分散していると、コンテンツが1か所から配信されるため、待ち時間の問題が発生する可能性があります。そのためにWebアプリケーションは高速でコンテンツ配信することが望ましいです。
 グローバル配信が可能 静的および動的コンテンツのアクセラレーション 待ち時間の短縮などパフォーマンス改善  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.0.0/16 VPC の CIDR ブロック    vpc description 任意 VPC for ${var.project_name} VPC の説明。この場合VPC for Accelerated-Content-Delivery-for-Terraform として表示されます。   alicloud_vswitch web name 任意 ${var.project_name}-web-vswitch vswitch の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-web-vswitch として表示されます。    web vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>オートスケーリングの実現</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/auto-scaling/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/auto-scaling/</guid>
      <description>&amp;nbsp; こちらはAlibabaCloud公式サイトにあるソリューション構築例を通じての紹介になります。
プロビジョニング済みのECSインスタンスをメインとするWebアプリケーションにて、予測が難しいトラフィックニーズに応じて、必要なECSインスタンス台数を増減してくれます。これにより、アプリケーションを止めることなく稼働し続けることが出来ます。同時にリソースに応じた需要増/減から必要なコスト管理も実現出来ます。
 アプリケーションの稼働時間・堅牢性向上 サーバーの自動プロビジョニング ニーズに応じたコスト管理  
&amp;nbsp; TerraformでWebアプリケーションを作ってみます。ゴールの構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.0.0/16 VPC の CIDR ブロック    vpc description 任意 VPC for ${var.project_name} VPC の説明。この場合VPC for Accelerated-Content-Delivery-for-Terraform として表示されます。   alicloud_vswitch web name 任意 ${var.project_name}-web-vswitch vswitch の名称。この例の場合、Accelerated-Content-Delivery-for-Terraform-web-vswitch として表示されます。    web vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title>KubernetesによるコンテナでWordPress作成</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/web-application-on-kubernetes/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/web-application-on-kubernetes/</guid>
      <description>&amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。 1. AlibabaCloudでKubernetesクラスターを生成 1. kube_configを環境変数にて設定 1. KubernetesクラスターのローカルボリュームにてWordPressとMySQLをインストール
こちらはAlibabaCloud Terraformのサンプル集を通じての紹介になります。
Kubernetesでクラスタ生成 &amp;nbsp; KubernetesによるコンテナでWordPressを作成します。流れは以下の通りになります。

&amp;nbsp; TerraformでWebアプリケーションを作ってみます。step1のゴール構成図は以下の通りです。
それぞれのパラメータは以下の通りです。
ネットワーク構成:
   リソース リソース名 パラメータ 必須 設定値 内容     alicloud_vpc vpc name 任意 ${var.project_name}-vpc VPC の名称。この例の場合、RDS-Sample-for-Terraform-vpc として表示されます。    vpc cidr_block 必須 192.168.1.0/24 VPC の CIDR ブロック    vpc description 任意 Enable k8s-Setteing-Sample vpc VPC の説明。   alicloud_vswitch vsw name 任意 ${var.project_name}-vswitch vswitch の名称。この例の場合、RDS-Sample-for-Terraform-vswitch として表示されます。    vsw vpc_id 必須 ${alicloud_vpc.</description>
    </item>
    
    <item>
      <title> MagentoでECサイト構築</title>
      <link>https://sbcloud.github.io/help/scenario/terraform/ec-site-sample/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0900</pubDate>
      
      <guid>https://sbcloud.github.io/help/scenario/terraform/ec-site-sample/</guid>
      <description>&amp;nbsp; インターネットを通じて自社商品を販売、宣伝するのにおすすめなのが、ECサイトを作るという方法です。ECは Electronic Commerce（電子商取引）の略です。 ECサイトの一つとして、オープンソースの電子商取引アプリケーション MagentoとWoo Commerce を使った構築方法がメインとなっています。Magento、もしくはWoo Commerce を使用すると、コーディングを一切行わなくてもオンラインストアをすばやく設定できます。それだけでなく多くの拡張機能、プラグイン、そしてテーマでカスタマイズすることもできます。今回は AlibabaCloud上にて高可用性アーキテクチャでMagento Community EditionをIaCで自動実装してみます。
 Magento Woo Commerce   
ちなみに、Amazonや楽天のように一つのWebサイトに複数の商店の商品やサービスがまとまっているものはオンラインモールといい、オープンソースのオンラインショッピング Webサイト管理システム EC-CUBEなどの方法があります。
 EC-CUBE   
ECサイトMagentoの構築について &amp;nbsp; ECサイト MagentoをTerraformを使って一発で構築してみます。ゴールの構成図は以下の通りです。
ソースは以下になります。サンプルソースは[こちら]()にあります。

 GUIでの操作方法もありますのでこちらも参考にしてください。  https://jp.alibabacloud.com/getting-started/projects/deploy-magento-on-alibaba-cloud?spm=a21mg.172235.898935.4.7b89497bUXnkWz
 ECSインスタンス１台にてMySQL、PHP、Magentoを入れる方法もあります。軽量でスモールスタートする場合、こちらも是非参照ください。 https://www.alibabacloud.com/help/doc-detail/50704.html  
STEP1: Magentoを利用するにあたり、アカウント発行が必要です。 1.Magentoサイトに入ります。 2.初回のみユーザ登録をします。 3.ユーザ登録で必要なフィールドを記載します。 4.設定が終わったらTopページに戻り、プロフィールのページを選定します。 5.Access Keyを選定します。 6.新規でAccess Keyを発行します。 7.Access Keyは用途ごとに使い分けられてるため、ここでPJ名など案件名を記載します。 8.これでMagento作成に必要なKey２種類の発行完了です。こちらは後々必要になるのでメモを残してください。 main.tf
provider &amp;quot;alicloud&amp;quot; { access_key = &amp;quot;${var.access_key}&amp;quot; secret_key = &amp;quot;${var.secret_key}&amp;quot; region = &amp;quot;${var.region}&amp;quot; } resource &amp;quot;alicloud_vpc&amp;quot; &amp;quot;default&amp;quot; { name = &amp;quot;${var.</description>
    </item>
    
  </channel>
</rss>